"use strict";

var _enzyme = require("enzyme");

var _Spottable = _interopRequireDefault(require("../Spottable"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('Spottable', function () {
  test('should add the spottable class', function () {
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'spottable';
    var actual = subject.find('div').prop('className');
    expect(actual).toEqual(expected);
  });
  test('should add the spottable class to a {disabled} component', function () {
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      disabled: true
    }));
    var expected = 'spottable';
    var actual = subject.find('div').prop('className');
    expect(actual).toEqual(expected);
  });
  test('should not add the spottable class to a {spotlightDisabled} component', function () {
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      spotlightDisabled: true
    }));
    var expected = 'spottable';
    var actual = subject.find('div').prop('className');
    expect(actual).not.toEqual(expected);
  });
  test('should emit {onSpotlightDisappear} when unmounted while focused', function () {
    var spy = jest.fn();
    var Component = (0, _Spottable["default"])('div');
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onSpotlightDisappear: spy
    }));
    subject.simulate('focus');
    subject.unmount();
    var expected = 1;
    var actual = spy.mock.calls.length;
    expect(actual).toEqual(expected);
  });
  describe('shouldComponentUpdate', function () {
    test('should re-render when a non-Spottable prop changes', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });
      var Component = (0, _Spottable["default"])(spy);
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
      subject.setProps({
        'data-id': '123'
      });
      var expected = 3;
      var actual = spy.mock.calls.length;
      expect(actual).toEqual(expected);
    });
    test('should re-render when {selectionKeys} changes', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });
      var Component = (0, _Spottable["default"])(spy);
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
        selectionKeys: [1, 2, 3]
      }));
      subject.setProps({
        selectionKeys: [2, 1, 3]
      });
      var expected = 3;
      var actual = spy.mock.calls.length;
      expect(actual).toEqual(expected);
    });
    test('should not re-render when focused', function () {
      var spy = jest.fn(function (props) {
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props));
      });
      var Component = (0, _Spottable["default"])(spy);
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
      subject.simulate('focus');
      var expected = 2;
      var actual = spy.mock.calls.length;
      expect(actual).toEqual(expected);
    });
  });
});