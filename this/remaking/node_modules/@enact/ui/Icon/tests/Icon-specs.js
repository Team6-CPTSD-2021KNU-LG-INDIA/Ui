"use strict";

var _enzyme = require("enzyme");

var _Icon = _interopRequireWildcard(require("../Icon"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('Icon', function () {
  test('should allow icon-name words to pass through', function () {
    var iconName = 'hollow_star';
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: iconName
    }));
    var expected = iconName;
    var actual = icon.text();
    expect(actual).toEqual(expected);
  });
  test('should allow single-byte characters to pass through', function () {
    var iconName = '+';
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: iconName
    }));
    var expected = iconName;
    var actual = icon.text();
    expect(actual).toEqual(expected);
  });
  test('should allow multi-byte characters to pass through', function () {
    var iconName = 'ó°‚ª';
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: iconName
    }));
    var expected = iconName;
    var actual = icon.text();
    expect(actual).toEqual(expected);
  });
  test('should allow pre-defined icon names as an icon', function () {
    var iconName = 'factory';
    var iconGlyph = 'F';
    var iconList = {
      train: 'T',
      factory: 'F'
    };
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      iconList: iconList,
      children: iconName
    }));
    var expected = iconGlyph;
    var actual = icon.text();
    expect(actual).toEqual(expected);
  });
  test('should allow un-matched icon names to fall through, even when pre-defined icons exist', function () {
    var iconName = 'custom-icon-word';
    var iconList = {
      train: 'T',
      factory: 'F'
    };
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      iconList: iconList,
      children: iconName
    }));
    var expected = iconName;
    var actual = icon.text();
    expect(actual).toEqual(expected);
  });
  test('should allow URIs to be used as an icon', function () {
    var src = 'images/icon.png';
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: src
    }));
    var expected = {
      backgroundImage: "url(".concat(src, ")")
    };
    var actual = icon.prop('style');
    expect(actual).toEqual(expected);
  });
  test('should allow URLs to be used as an icon', function () {
    var src = 'http://enactjs.com/images/logo';
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: src
    }));
    var expected = {
      backgroundImage: "url(".concat(src, ")")
    };
    var actual = icon.prop('style');
    expect(actual).toEqual(expected);
  });
  test('should merge author styles with image URLs', function () {
    var src = 'images/icon.png';
    var icon = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      style: {
        color: 'green'
      },
      children: src
    }));
    var expected = {
      color: 'green',
      backgroundImage: "url(".concat(src, ")")
    };
    var actual = icon.prop('style');
    expect(actual).toEqual(expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], {
      ref: ref
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});