"use strict";

var _react = require("react");

var _enzyme = require("enzyme");

var _ToggleItem = _interopRequireWildcard(require("../ToggleItem"));

var _Icon = _interopRequireDefault(require("../../Icon"));

var _SlotItem = _interopRequireDefault(require("../../SlotItem"));

var _Item = _interopRequireDefault(require("../../Item"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SlottedItem = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_SlotItem["default"], _objectSpread(_objectSpread({}, props), {}, {
    component: _Item["default"],
    ref: ref
  }));
});

var tap = function tap(node) {
  node.simulate('mousedown');
  node.simulate('mouseup');
};

var CustomIcon = function CustomIcon(props) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon["default"], _objectSpread(_objectSpread({}, props), {}, {
    children: "star"
  }));
};

describe('ToggleItem Specs', function () {
  test('should call onToggle, onClick, or both when clicked', function () {
    var handleToggle = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      onToggle: handleToggle,
      iconComponent: CustomIcon,
      children: "Toggle Item"
    }));
    tap(subject);
    var expected = 1;
    var actual = handleToggle.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should call onClick when clicked', function () {
    var handleClick = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem.ToggleItemBase, {
      component: SlottedItem,
      onClick: handleClick,
      iconComponent: CustomIcon,
      children: "Toggle Item"
    }));
    subject.simulate('click');
    var expected = 1;
    var actual = handleClick.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should call onTap when tapped', function () {
    var handleTap = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      onTap: handleTap,
      iconComponent: CustomIcon,
      children: "Toggle Item"
    }));
    tap(subject);
    var expected = 1;
    var actual = handleTap.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should call both onToggle and onTap when tapped', function () {
    var handleBoth = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      onTap: handleBoth,
      onToggle: handleBoth,
      iconComponent: CustomIcon,
      children: "Toggle Item"
    }));
    tap(subject);
    var expected = 2;
    var actual = handleBoth.mock.calls.length;
    expect(expected).toBe(actual);
  });
  test('should receive its value prop in the onToggle handler', function () {
    var handleToggle = jest.fn();
    var value = 100;
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      onToggle: handleToggle,
      iconComponent: CustomIcon,
      value: value,
      children: "Toggle Item"
    }));
    tap(subject);
    var expected = value;
    var actual = handleToggle.mock.calls[0][0].value;
    expect(expected).toBe(actual);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ToggleItem["default"], {
      component: SlottedItem,
      iconComponent: CustomIcon,
      ref: ref,
      children: "Toggle Item"
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});