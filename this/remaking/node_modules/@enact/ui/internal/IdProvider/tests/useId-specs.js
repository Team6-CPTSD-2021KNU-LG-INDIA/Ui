"use strict";

var _enzyme = require("enzyme");

var _useId = _interopRequireDefault(require("../useId"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('useId', function () {
  function Base() {
    return null;
  }

  function Component(_ref) {
    var key = _ref.key,
        prefix = _ref.prefix,
        onUnmount = _ref.onUnmount;
    var provider = (0, _useId["default"])({
      prefix: prefix
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Base, _objectSpread(_objectSpread({}, provider), {}, {
      id: provider.generateId(key, prefix, onUnmount)
    }));
  }

  test('should provide a generateId method', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = 'function';
    var actual = typeof subject.find(Base).prop('generateId');
    expect(actual).toBe(expected);
  });
  test('should generate different ids for different instances of the same component', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {})]
    }));
    var first = subject.find(Base).first().prop('id');
    var last = subject.find(Base).last().prop('id');
    expect(first).not.toBe(last);
  });
  test('should maintain the same id across renders', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
    var expected = subject.find(Base).prop('id');
    subject.setProps({});
    var actual = subject.find(Base).prop('id');
    expect(actual).toBe(expected);
  });
  test('should prefix the id with the provided value', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      prefix: "my-id"
    }));
    var expected = 'my-id';
    var actual = subject.find(Base).prop('id').substring(0, 5);
    expect(actual).toBe(expected);
  });
  test('should call onUnmount callback', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onUnmount: spy
    }));
    subject.unmount();
    expect(spy).toHaveBeenCalledTimes(1);
  });
});