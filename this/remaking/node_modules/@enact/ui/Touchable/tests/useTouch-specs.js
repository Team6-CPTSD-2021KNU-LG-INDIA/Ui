"use strict";

var _enzyme = require("enzyme");

var _useTouch = _interopRequireDefault(require("../useTouch"));

var _config = require("../config");

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

describe('useTouch', function () {
  var DivComponent = function DivComponent() {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
  };

  var TouchableComponent = function TouchableComponent(_ref) {
    var id = _ref.id,
        activeProp = _ref.activeProp,
        rest = _objectWithoutProperties(_ref, ["id", "activeProp"]);

    var hook = (0, _useTouch["default"])(_objectSpread({
      getActive: !!activeProp
    }, rest));
    return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
      id: id
    }, hook.handlers), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DivComponent, _objectSpread({}, _defineProperty({}, activeProp, hook.active)))
    }));
  };

  var preventDefault = function preventDefault(ev) {
    return ev.preventDefault();
  };

  describe('config', function () {
    beforeEach(_config.resetDefaultConfig);
    afterEach(_config.resetDefaultConfig);
    test('should return active state when activeProp is configured', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active"
      }));
      var wrapped = subject.find(DivComponent);
      var expected = true;
      var actual = ('active' in wrapped.props());
      expect(actual).toBe(expected);
    });
    test('should merge configurations', function () {
      (0, _config.configure)({
        flick: {
          maxMoves: 10
        }
      });
      var expected = 10;
      var actual = (0, _config.getConfig)().flick.maxMoves;
      expect(actual).toBe(expected);
    });
    test('should omit unsupported configurations', function () {
      (0, _config.configure)({
        flick: {
          notSupported: 10
        }
      }); // eslint-disable-next-line no-undefined

      var expected = undefined;
      var actual = (0, _config.getConfig)().flick.notSupported;
      expect(actual).toBe(expected);
    });
    test('should not update config when local object is mutated', function () {
      var cfg = {
        flick: {
          maxMoves: 10
        }
      };
      (0, _config.configure)(cfg);
      cfg.flick.maxMoves = 20;
      var expected = 10;
      var actual = (0, _config.getConfig)().flick.maxMoves;
      expect(actual).toBe(expected);
    });
    test('should not update config when local hold.events array is mutated', function () {
      var cfg = {
        hold: {
          events: [{
            name: 'hold',
            time: 600
          }]
        }
      };
      (0, _config.configure)(cfg);
      cfg.hold.events[0].time = 2000;
      var expected = 600;
      var actual = (0, _config.getConfig)().hold.events[0].time;
      expect(actual).toBe(expected);
    });
  });
  describe('#onDown', function () {
    test('should invoke onDown handle on mouse down', function () {
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onDown: handler
      }));
      subject.simulate('mousedown', {});
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
  describe('#onUp', function () {
    test('should invoke onUp handle on mouse up', function () {
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onUp: handler
      }));
      subject.simulate('mousedown', {});
      subject.simulate('mouseup', {});
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
  describe('#onTap', function () {
    test('should be called on mouse up', function () {
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onTap: handler
      }));
      subject.simulate('mousedown', {});
      subject.simulate('mouseup', {});
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should be called on click', function () {
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onTap: handler
      }));
      subject.simulate('click');
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should be called before onClick on click', function () {
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onClick: handler,
        onTap: handler
      }));
      subject.simulate('click');
      var expected = ['onTap', 'click'];
      var actual = handler.mock.calls.map(function (call) {
        return call[0].type;
      });
      expect(actual).toEqual(expected);
    });
    test('should be called before onCLick on mouse up', function () {
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onClick: handler,
        onTap: handler
      }));
      var ev = {
        // a matching timeStamp is used by Touchable to prevent multiple onTaps on "true"
        // click (mouseup + click)
        timeStamp: 1
      };
      subject.simulate('mousedown', ev);
      subject.simulate('mouseup', ev);
      subject.simulate('click', ev);
      var expected = ['onTap', 'click'];
      var actual = handler.mock.calls.map(function (call) {
        return call[0].type;
      });
      expect(actual).toEqual(expected);
    });
    test('should be preventable via onUp handler', function () {
      var handler = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
        activeProp: "active",
        onTap: handler,
        onUp: preventDefault
      }));
      subject.simulate('mousedown', {});
      subject.simulate('mouseup', {});
      var expected = 0;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
  describe('state management', function () {
    describe('activate', function () {
      test('should update active state on mouse down when activeProp is configured', function () {
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: handler
        }));
        var beforeDown = subject.find(DivComponent).prop('active');
        subject.simulate('mousedown', {});
        var afterDown = subject.find(DivComponent).prop('active');
        var expected = false;
        var actual = beforeDown === afterDown;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when disabled', function () {
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          disabled: true,
          onDown: handler
        }));
        subject.simulate('mousedown', {});
        var expected = false;
        var actual = subject.find(DivComponent).prop('active');
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when preventDefault is called', function () {
        var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: preventDefault
        }));
        subject.simulate('mousedown', {});
        var expected = false;
        var actual = subject.find(DivComponent).prop('active');
        expect(actual).toBe(expected);
      });
    });
    describe('deactivate', function () {
      test('should update active state on mouse up when activeProp is configured', function () {
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: handler
        }));
        subject.simulate('mousedown', {});
        var beforeUp = subject.find(DivComponent).prop('active');
        subject.simulate('mouseup', {});
        var afterUp = subject.find(DivComponent).prop('active');
        var expected = false;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when disabled', function () {
        var handler = jest.fn();
        var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          disabled: true,
          onDown: handler
        }));
        subject.simulate('mousedown', {});
        var beforeUp = subject.find(DivComponent).prop('active');
        subject.simulate('mouseup', {});
        var afterUp = subject.find(DivComponent).prop('active');
        var expected = true;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
      test('should not update active state on mouse down when preventDefault is called', function () {
        var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(TouchableComponent, {
          activeProp: "active",
          onDown: preventDefault
        }));
        subject.simulate('mousedown', {});
        var beforeUp = subject.find(DivComponent).prop('active');
        subject.simulate('mouseup', {});
        var afterUp = subject.find(DivComponent).prop('active');
        var expected = true;
        var actual = beforeUp === afterUp;
        expect(actual).toBe(expected);
      });
    });
  });
  describe('touch', function () {
    test('should only emit onTap once when tapping an child instance of Touchable', function () {
      var handler = jest.fn();

      var Component = function Component() {
        var outerHook = (0, _useTouch["default"])({
          onTap: handler
        });
        var innerHook = (0, _useTouch["default"])();
        return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
          id: "outer"
        }, outerHook.handlers), {}, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread(_objectSpread({
            id: "inner"
          }, innerHook.handlers), {}, {
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DivComponent, {})
          }))
        }));
      };

      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {}));
      var mouseEvent = {
        timeStamp: 1
      };
      var touchEvent = {
        timeStamp: 1,
        changedTouches: [{
          clientX: 0,
          clientY: 0
        }],
        targetTouches: [{
          clientX: 0,
          clientY: 0
        }]
      };
      var inner = subject.find('div#inner');
      inner.simulate('touchstart', touchEvent);
      inner.simulate('touchend', touchEvent);
      inner.simulate('mousedown', mouseEvent);
      inner.simulate('mouseup', mouseEvent);
      var expected = 1;
      var actual = handler.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
});