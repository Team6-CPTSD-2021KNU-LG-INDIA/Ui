"use strict";

var _enzyme = require("enzyme");

var _Heading = _interopRequireDefault(require("../Heading"));

var _HeadingModule = _interopRequireDefault(require("../Heading.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Heading Specs', function () {
  test('should render a Heading with content', function () {
    var content = 'Hello Heading!';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      children: content
    }));
    var expected = content;
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should apply a size class when defining a size', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      children: "Heading Text"
    }));
    var expected = _HeadingModule["default"].large;
    var actual = subject.find('.heading').prop('className');
    expect(actual).toContain(expected);
  });
  test('should apply a matching spacing class to its defined size', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      children: "Heading Text"
    }));
    var expected = _HeadingModule["default"].largeSpacing;
    var actual = subject.find('.heading').prop('className');
    expect(actual).toContain(expected);
  });
  test('should apply an alternate spacing class to its defined size if the two differ', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      spacing: "small",
      children: "Heading Text"
    }));
    var expected = _HeadingModule["default"].smallSpacing;
    var actual = subject.find('.heading').prop('className');
    expect(actual).toContain(expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Heading["default"], {
      size: "large",
      ref: ref
    }));
    var expected = 'H3';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});