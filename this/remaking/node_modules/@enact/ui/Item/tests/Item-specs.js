"use strict";

var _enzyme = require("enzyme");

var _Item = _interopRequireDefault(require("../Item"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tap = function tap(node) {
  node.simulate('mousedown');
  node.simulate('mouseup');
};

describe('Item', function () {
  test('should create an Item that is enabled by default', function () {
    var item = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], {
      children: "I am an Item"
    }));
    var expected = 0;
    var actual = item.find({
      disabled: true
    }).length;
    expect(actual).toBe(expected);
  });
  test('should have \'disabled\' HTML attribute when \'disabled=true\'', function () {
    var item = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], {
      disabled: true,
      children: "I am a disabled Item"
    }));
    var expected = 1;
    var actual = item.find('div[disabled=true]').length;
    expect(actual).toBe(expected);
  });
  describe('events', function () {
    test('should call onTap when tapped', function () {
      var handleClick = jest.fn();
      var item = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], {
        onTap: handleClick,
        children: "I am a normal Item"
      }));
      tap(item);
      var expected = 1;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should not call onTap when tapped and disabled', function () {
      var handleClick = jest.fn();
      var item = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], {
        disabled: true,
        onTap: handleClick,
        children: "I am a disabled Item"
      }));
      tap(item);
      var expected = 0;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should call onClick when clicked', function () {
      var handleClick = jest.fn();
      var item = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], {
        onClick: handleClick,
        children: "I am a normal Item"
      }));
      item.simulate('click');
      var expected = 1;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should not call onClick when clicked and disabled', function () {
      var handleClick = jest.fn();
      var item = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item["default"], {
        disabled: true,
        onClick: handleClick,
        children: "I am a disabled Item"
      }));
      item.simulate('click');
      var expected = 0;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
  });
});