"use strict";

var _enzyme = require("enzyme");

var _FloatingLayer = require("../FloatingLayer");

var _FloatingLayerDecorator = require("../FloatingLayerDecorator");

var _jsxRuntime = require("react/jsx-runtime");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

describe('FloatingLayer Specs', function () {
  function Root(props) {
    var hook = (0, _FloatingLayerDecorator.useFloatingLayerDecorator)();
    return hook.provideFloatingLayer( /*#__PURE__*/(0, _jsxRuntime.jsx)("div", _objectSpread({}, props), "floatWrapped"));
  }

  test('should not render if FloatingLayer is not open', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          children: "Hi"
        })
      })
    }));
    var expected = null;
    var actual = subject.find('FloatingLayer').instance().node;
    expect(actual).toBe(expected);
  });
  test('should render if FloatingLayer is open', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Root, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_FloatingLayer.FloatingLayerBase, {
        open: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
          children: "Hi"
        })
      })
    }));
    var expected = 1;
    var actual = subject.find('FloatingLayer').instance().node.querySelectorAll('p').length;
    expect(actual).toBe(expected);
  });
});