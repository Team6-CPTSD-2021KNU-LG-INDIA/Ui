"use strict";

var _enzyme = require("enzyme");

var _ImageItem = _interopRequireWildcard(require("../ImageItem"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var src = {
  'hd': 'http://lorempixel.com/64/64/city/1/',
  'fhd': 'http://lorempixel.com/128/128/city/1/',
  'uhd': 'http://lorempixel.com/256/256/city/1/'
};
describe('ImageItem', function () {
  function Img() {
    return null;
  }

  test('should support `children` prop', function () {
    var children = 'children';
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      children: children
    }));
    var expected = children;
    var actual = subject.find('.caption').prop('children');
    expect(actual).toBe(expected);
  });
  test('should omit caption node when `children` is unset', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {}));
    var actual = subject.find('.caption');
    expect(actual).toHaveLength(0);
  });
  test('should use a `Row` when `orientation="horizontal"`', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      orientation: "horizontal"
    }));
    var actual = subject.find('Row.imageItem');
    expect(actual).toHaveLength(1);
  });
  test('should apply `.horizontal` when `orientation="horizontal"`', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      orientation: "horizontal"
    }));
    var expected = 'horizontal';
    var actual = subject.prop('className');
    expect(actual).toContain(expected);
  });
  test('should use a `Column` when `orientation="vertical"`', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      orientation: "vertical"
    }));
    var actual = subject.find('Column.imageItem');
    expect(actual).toHaveLength(1);
  });
  test('should apply `.horizontal` when `orientation="vertical"`', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      orientation: "vertical"
    }));
    var expected = 'vertical';
    var actual = subject.prop('className');
    expect(actual).toContain(expected);
  });
  test('should apply `.selected` when `selected`', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      selected: true
    }));
    var expected = 'selected';
    var actual = subject.prop('className');
    expect(actual).toContain(expected);
  });
  test('should pass `src` and `placeholder` to `imageComponent` as component', function () {
    var props = {
      src: 'img.png',
      placeholder: 'place.png'
    }; // Using mount() to render Img within Cell

    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, _objectSpread({
      imageComponent: Img
    }, props)));
    var expected = props;
    var actual = subject.find(Img).props();
    expect(actual).toMatchObject(expected);
  });
  test('should pass `src` and `placeholder` to `imageComponent` as element', function () {
    var props = {
      src: 'img.png',
      placeholder: 'place.png'
    }; // Using mount() to render Img within Cell

    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, _objectSpread({
      imageComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(Img, {})
    }, props)));
    var expected = props;
    var actual = subject.find(Img).props();
    expect(actual).toMatchObject(expected);
  });
  test('should override `src` and `placeholder` when passing `imageComponent` as element', function () {
    var props = {
      src: 'img.png',
      placeholder: 'place.png'
    }; // Using mount() to render Img within Cell

    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, _objectSpread({
      imageComponent: /*#__PURE__*/(0, _jsxRuntime.jsx)(Img, {
        src: "my-src.png",
        placeholder: "my-place.png"
      })
    }, props)));
    var expected = props;
    var actual = subject.find(Img).props();
    expect(actual).toMatchObject(expected);
  });
  test('should support string for `src` prop', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      src: src.hd
    }));
    var expected = {
      src: src.hd
    };
    var actual = subject.find('.image').props();
    expect(actual).toMatchObject(expected);
  });
  test('should support object for `src` prop', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem.ImageItemBase, {
      src: src
    }));
    var expected = {
      src: src
    };
    var actual = subject.find('.image').props();
    expect(actual).toMatchObject(expected);
  });
  test('should return a DOM node reference for `componentRef`', function () {
    var ref = jest.fn();
    (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_ImageItem["default"], {
      ref: ref,
      src: src
    }));
    var expected = 'DIV';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});