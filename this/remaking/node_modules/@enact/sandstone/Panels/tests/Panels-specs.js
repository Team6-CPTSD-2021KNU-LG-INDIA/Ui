"use strict";

var _enzyme = require("enzyme");

var _Header = _interopRequireDefault(require("../Header"));

var _Panel = _interopRequireDefault(require("../Panel"));

var _Panels = _interopRequireDefault(require("../Panels"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Panels Specs', function () {
  test('should set {autoFocus} on child to "default-element" on first render', function () {
    var DivPanel = function DivPanel(_ref) {
      var autoFocus = _ref.autoFocus,
          id = _ref.id;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        id: id,
        children: autoFocus
      });
    };

    var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels["default"], {
      index: 0,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {})
    }));
    var expected = 'default-element';
    var actual = panels.find('DivPanel').prop('autoFocus');
    expect(actual).toBe(expected);
  });
  test('should set {autoFocus} on child to "default-element" when navigating to a higher index', function () {
    var DivPanel = function DivPanel(_ref2) {
      var autoFocus = _ref2.autoFocus,
          id = _ref2.id;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        id: id,
        children: autoFocus
      });
    };

    var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
      index: 0,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {
        id: "p2"
      })]
    }));
    panels.setProps({
      index: 1
    });
    var expected = 'default-element';
    var actual = panels.find('DivPanel#p2').prop('autoFocus');
    expect(actual).toBe(expected);
  });
  test('should not set {autoFocus} on child when navigating to a higher index when it has an autoFocus prop set', function () {
    var DivPanel = function DivPanel(_ref3) {
      var autoFocus = _ref3.autoFocus,
          id = _ref3.id;
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        id: id,
        children: autoFocus
      });
    };

    var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
      index: 0,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(DivPanel, {
        id: "p2",
        autoFocus: "last-focused"
      })]
    }));
    panels.setProps({
      index: 1
    });
    var expected = 'last-focused';
    var actual = panels.find('DivPanel#p2').prop('autoFocus');
    expect(actual).toBe(expected);
  });
  test('should return a ref to the root Panel node', function () {
    var ref = jest.fn();
    (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
      ref: ref
    }));
    var expected = 'ARTICLE';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
  describe('with Panel and Header', function () {
    test('should not render back button on the first panel', function () {
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels["default"], {
        index: 0,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })
      }));
      var backButton = panels.find('Header .slotBefore').find('Button');
      var expected = 0;
      var actual = backButton.length;
      expect(actual).toBe(expected);
    });
    test('should render back button when not on the first panel', function () {
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
        index: 1,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })]
      }));
      var backButton = panels.find('Header .slotBefore').find('Button');
      var expected = 1;
      var actual = backButton.length;
      expect(actual).toBe(expected);
    });
    test('should not render back button when not on the first panel and \'noBackButton\' is set to true', function () {
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
        index: 1,
        noBackButton: true,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })]
      }));
      var backButton = panels.find('Header .slotBefore').find('Button');
      var expected = 0;
      var actual = backButton.length;
      expect(actual).toBe(expected);
    });
    test('should not render back button when \'noBackButton\' is set on `Panel` 2', function () {
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
        index: 1,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          noBackButton: true,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })]
      }));
      var backButton = panels.find('Header .slotBefore').find('Button');
      var expected = 0;
      var actual = backButton.length;
      expect(actual).toBe(expected);
    });
    test('should render back button on panel 3 when \'noBackButton\' is set on panel 2', function () {
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
        index: 2,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          noBackButton: true,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })]
      }));
      var backButton = panels.find('Header .slotBefore').find('Button');
      var expected = 1;
      var actual = backButton.length;
      expect(actual).toBe(expected);
    });
    test('should set back button "aria-label" to backButtonAriaLabel', function () {
      var label = 'custom back button label';
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
        backButtonAriaLabel: label,
        index: 1,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })]
      }));
      var expected = label;
      var actual = panels.find('Header .slotBefore').find('Button').prop('aria-label');
      expect(actual).toBe(expected);
    });
    test('should set back button "aria-label" to backButtonAriaLabel when defined only on a panel', function () {
      var label = 'custom back button label';
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Panels["default"], {
        index: 1,
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          backButtonAriaLabel: label,
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })]
      }));
      var expected = label;
      var actual = panels.find('Header .slotBefore').find('Button').prop('aria-label');
      expect(actual).toBe(expected);
    });
    test('should render close button', function () {
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels["default"], {
        index: 0,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })
      }));
      var closeButton = panels.find('Header .slotAfter').find('Button');
      var expected = 1;
      var actual = closeButton.length;
      expect(actual).toBe(expected);
    });
    test('should not render close button when \'noCloseButton\' is set to true', function () {
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels["default"], {
        index: 0,
        noCloseButton: true,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })
      }));
      var backButton = panels.find('Header .slotAfter').find('Button');
      var expected = 0;
      var actual = backButton.length;
      expect(actual).toBe(expected);
    });
    test('should set close button "aria-label" to closeButtonAriaLabel', function () {
      var label = 'custom close button label';
      var panels = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels["default"], {
        closeButtonAriaLabel: label,
        index: 0,
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {})
        })
      }));
      var expected = label;
      var actual = panels.find('Header .slotAfter').find('Button').prop('aria-label');
      expect(actual).toBe(expected);
    });
  });
});