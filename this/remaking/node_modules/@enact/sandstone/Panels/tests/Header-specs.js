"use strict";

var _enzyme = require("enzyme");

var _Header = _interopRequireDefault(require("../Header"));

var _HeaderModule = _interopRequireDefault(require("../Header.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var tap = function tap(node) {
  node.simulate('mousedown');
  node.simulate('mouseup');
};

describe('Header Specs', function () {
  test('should render with title text without changing case', function () {
    var expected = 'cRaZy-cased super Header';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: expected
      })
    }));
    var actual = subject.find('h1').text();
    expect(actual).toBe(expected);
  });
  test('should support "wizard" type', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      type: "wizard",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: "Wizard Header"
      })
    }));
    var expected = _HeaderModule["default"].wizard;
    var actual = subject.find(".".concat(_HeaderModule["default"].header)).first().prop('className');
    expect(actual).toContain(expected);
  });
  test('should support "compact" type', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      type: "compact",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: "Compact Header"
      })
    }));
    var expected = _HeaderModule["default"].compact;
    var actual = subject.find(".".concat(_HeaderModule["default"].header)).first().prop('className');
    expect(actual).toContain(expected);
  });
  test('should have centered class applied when the centered prop is true', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      centered: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: "Centered Header"
      })
    }));
    var expected = _HeaderModule["default"].centered;
    var actual = subject.find(".".concat(_HeaderModule["default"].header)).first().prop('className');
    expect(actual).toContain(expected);
  });
  test('should support `slotAbove`', function () {
    var expected = 'slot above';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Header["default"], {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("slotAbove", {
        children: expected
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: "Slotted Header"
      })]
    }));
    var actual = subject.find(".".concat(_HeaderModule["default"].slotAbove)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support `slotBefore`', function () {
    var expected = 'slot before';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Header["default"], {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("slotBefore", {
        children: expected
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: "Slotted Header"
      })]
    }));
    var actual = subject.find(".".concat(_HeaderModule["default"].slotBefore)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support `slotAfter`', function () {
    var expected = 'slot after';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Header["default"], {
      noCloseButton: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("title", {
        children: "Slotted Header"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("slotAfter", {
        children: expected
      })]
    }));
    var actual = subject.find(".".concat(_HeaderModule["default"].slotAfter)).first().text();
    expect(actual).toBe(expected);
  });
  test('should not render back button', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {}));
    var backButton = subject.find(".".concat(_HeaderModule["default"].slotBefore)).find('Button');
    var expected = 0;
    var actual = backButton.length;
    expect(actual).toBe(expected);
  });
  test('should render close button when \'noCloseButton\' is not specified', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {}));
    var closeButton = subject.find(".".concat(_HeaderModule["default"].slotAfter)).find('Button');
    var expected = 1;
    var actual = closeButton.length;
    expect(actual).toBe(expected);
  });
  test('should not render close button when \'noCloseButton\' is set to true', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      noCloseButton: true
    }));
    var closeButton = subject.find(".".concat(_HeaderModule["default"].slotAfter)).find('Button');
    var expected = 0;
    var actual = closeButton.length;
    expect(actual).toBe(expected);
  });
  test('should call onClose when close button is clicked', function () {
    var handleClose = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      onClose: handleClose
    }));
    tap(subject.find(".".concat(_HeaderModule["default"].slotAfter)).find('Button'));
    var expected = 1;
    var actual = handleClose.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should set close button "aria-label" to closeButtonAriaLabel', function () {
    var label = 'custom close button label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      closeButtonAriaLabel: label
    }));
    var expected = label;
    var actual = subject.find(".".concat(_HeaderModule["default"].slotAfter)).find('Button').prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should use `ViewManager` for `type="wizard"`', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      type: "wizard",
      arranger: {
        enter: function enter() {},
        leave: function leave() {}
      },
      title: "title",
      subtitle: "subtitle"
    }));
    var expected = {
      duration: 500,
      index: 0
    };
    var actual = subject.find('ViewManager').props();
    expect(actual).toMatchObject(expected);
  });
  test('should not use `ViewManager` for other `type` values', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], {
      type: "standard",
      arranger: {
        enter: function enter() {},
        leave: function leave() {}
      },
      title: "title",
      subtitle: "subtitle"
    }));
    var expected = 0;
    var actual = subject.find('ViewManager').length;
    expect(actual).toBe(expected);
  });
});