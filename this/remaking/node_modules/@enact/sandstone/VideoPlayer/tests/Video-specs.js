"use strict";

var _enzyme = require("enzyme");

var _Video = _interopRequireDefault(require("../Video"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/* global HTMLMediaElement */
describe('VideoPlayer.Video', function () {
  function getSourceNode(wrapper) {
    return wrapper.find('Video').instance().video;
  }

  function getPreloadNode(wrapper) {
    return wrapper.find('Video').instance().preloadVideo;
  }

  beforeEach(function () {
    jest.spyOn(HTMLMediaElement.prototype, 'load').mockImplementation(function () {
      return true;
    });
  });
  afterEach(function () {
    HTMLMediaElement.prototype.load.mockRestore();
  });
  describe('changing sources', function () {
    // Failures in these tests will often result in the following error. The error is misleading
    // but indicates the nodes aren't reused as expected.
    // TypeError: Cannot assign to read only property 'Symbol(impl)' of object '[object DOMImplementation]'
    test('should use the same node when changing the `source`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      var expected = getSourceNode(subject);
      subject.setProps({
        source: 'def.mp4'
      });
      var actual = getSourceNode(subject);
      expect(actual).toBe(expected);
    });
    test('should not render `preloadSource` when not present', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      var expected = 1;
      var actual = subject.find('Media').length;
      expect(actual).toBe(expected);
    });
    test('should use same `source` when removing `source` and no `preload`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      var expected = getSourceNode(subject);
      subject.setProps({
        source: undefined // eslint-disable-line no-undefined

      });
      var actual = getSourceNode(subject);
      expect(actual).toBe(expected);
    });
    test('should use same `source` when adding `source` and no `preload`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {}));
      var expected = getSourceNode(subject);
      subject.setProps({
        source: 'abc.mp4'
      });
      var actual = getSourceNode(subject);
      expect(actual).toBe(expected);
    });
    test('should use the same node when adding `preloadSource`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      var expected = getSourceNode(subject);
      subject.setProps({
        preloadSource: 'def.mp4'
      });
      var actual = getSourceNode(subject);
      expect(actual).toBe(expected);
    });
    test('should render `preloadSource` when added', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      subject.setProps({
        preloadSource: 'def.mp4'
      });
      var expected = 2;
      var actual = subject.find('Media').length;
      expect(actual).toBe(expected);
    });
    test('should use the same node when adding `preloadSource` the same as source', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      var expected = getSourceNode(subject);
      subject.setProps({
        preloadSource: 'abc.mp4'
      });
      var actual = getSourceNode(subject);
      expect(actual).toBe(expected);
    });
    test('should use the same node when changing `preloadSource`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4",
        preloadSource: "def.mp4"
      }));
      var expected = getPreloadNode(subject);
      subject.setProps({
        preloadSource: 'ghi.mp4'
      });
      var actual = getPreloadNode(subject);
      expect(actual).toBe(expected);
    });
    test('should swaps nodes when swapping `source` and `preloadSource`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4",
        preloadSource: "def.mp4"
      }));
      var source = getSourceNode(subject);
      var preload = getPreloadNode(subject);
      subject.setProps({
        source: 'def.mp4',
        preloadSource: 'abc.mp4'
      });
      expect(getSourceNode(subject)).toBe(preload);
      expect(getPreloadNode(subject)).toBe(source);
    });
    test('should not swap nodes on re-render after swapping `source` and `preloadSource`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4",
        preloadSource: "def.mp4"
      }));
      var source = getSourceNode(subject);
      var preload = getPreloadNode(subject);
      subject.setProps({
        source: 'def.mp4',
        preloadSource: 'abc.mp4'
      });
      subject.setProps({});
      expect(getSourceNode(subject)).toBe(preload);
      expect(getPreloadNode(subject)).toBe(source);
    });
    test('should reuse preload node when moving `preloadSource` to `source`', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4",
        preloadSource: "def.mp4"
      }));
      var preload = getPreloadNode(subject);
      subject.setProps({
        source: 'def.mp4',
        preloadSource: null
      });
      expect(getSourceNode(subject)).toBe(preload);
      expect(getPreloadNode(subject)).toBeFalsy();
    });
    test('should reuse both nodes when both `preloadSource` and `source` change', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4",
        preloadSource: "def.mp4"
      }));
      var source = getSourceNode(subject);
      var preload = getPreloadNode(subject);
      subject.setProps({
        source: 'ghi.mp4',
        preloadSource: 'jkl.mp4'
      });
      expect(getSourceNode(subject)).toBe(source);
      expect(getPreloadNode(subject)).toBe(preload);
    });
    test('should reuse source node over two changes', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      var source = getSourceNode(subject);
      subject.setProps({
        source: 'def.mp4'
      });
      expect(getSourceNode(subject)).toBe(source);
      subject.setProps({
        source: 'ghi.mp4'
      });
      expect(getSourceNode(subject)).toBe(source);
    });
    test('should swap nodes when preload does not exist initially', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Video["default"], {
        source: "abc.mp4"
      }));
      var source = getSourceNode(subject);
      subject.setProps({
        preloadSource: 'def.mp4'
      });
      var preload = getPreloadNode(subject);
      subject.setProps({
        source: 'def.mp4',
        preloadSource: 'abc.mp4'
      });
      expect(getSourceNode(subject)).toBe(preload);
      expect(getPreloadNode(subject)).toBe(source);
    });
  });
});