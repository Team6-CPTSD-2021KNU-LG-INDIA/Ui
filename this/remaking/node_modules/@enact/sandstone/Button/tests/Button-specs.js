"use strict";

var _enzyme = require("enzyme");

var _Button = _interopRequireWildcard(require("../Button"));

var _ButtonModule = _interopRequireDefault(require("../Button.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('Button', function () {
  test('should have \'disabled\' HTML attribute when \'disabled\' prop is provided', function () {
    var button = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
      disabled: true,
      children: "I am a disabled Button"
    }));
    var expected = true;
    var actual = button.find('div').at(0).prop('disabled');
    expect(actual).toBe(expected);
  });
  it('should have default backgroundOpacity opaque', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));
    var expected = _ButtonModule["default"].opaque;
    var actual = subject.first().prop('className');
    expect(actual).toContain(expected);
  });
  it('should expand by default', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));
    var expected = 'focusExpand';
    var actual = subject.first().prop('className');
    expect(actual).toContain(expected);
  });
  it('should be able to disable the expand focus effect', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
      focusEffect: "static"
    }));
    var expected = 'focusStatic';
    var actual = subject.first().prop('className');
    expect(actual).toContain(expected);
  });
  it('should have default minWidth', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));
    var expected = _ButtonModule["default"].minWidth;
    var actual = subject.first().prop('className');
    expect(actual).toContain(expected);
  });
  it('should have default size large', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {}));
    var expected = _ButtonModule["default"].large;
    var actual = subject.first().prop('className');
    expect(actual).toContain(expected);
  });
  describe('with no minWidth', function () {
    it('should not have minWidth class', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
        minWidth: false
      }));
      var expected = _ButtonModule["default"].minWidth;
      var actual = subject.first().prop('className');
      expect(actual).not.toContain(expected);
    });
  });
  describe('with transparent backgroundOpacity', function () {
    it('should have transparent class', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
        backgroundOpacity: "transparent"
      }));
      var expected = _ButtonModule["default"].transparent;
      var actual = subject.first().prop('className');
      expect(actual).toContain(expected);
    });
    it('should not have have opaque class', function () {
      var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button.ButtonBase, {
        backgroundOpacity: "transparent"
      }));
      var expected = _ButtonModule["default"].opaque;
      var actual = subject.first().prop('className');
      expect(actual).not.toContain(expected);
    });
  });
  describe('with icon', function () {
    it('should have check icon when specified', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check",
        children: "abc"
      }));
      var expected = 'âœ“';
      var actual = subject.find('Icon').first().text();
      expect(actual).toEqual(expected);
    });
    it('should not have minWidth class with only icon', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check"
      }));
      var expected = _ButtonModule["default"].minWidth;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).not.toContain(expected);
    });
    it('should have iconAfter class with text and icon', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check",
        iconPosition: "after",
        children: "text"
      }));
      var expected = _ButtonModule["default"].iconAfter;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
    it('should have iconBefore class with text and icon', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check",
        iconPosition: "before",
        children: "text"
      }));
      var expected = _ButtonModule["default"].iconBefore;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
    it('should not have iconPosition classes with only icon', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check"
      }));
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).not.toContain(_ButtonModule["default"].iconBefore);
      expect(actual).not.toContain(_ButtonModule["default"].iconAfter);
    });
    it('should have iconOnly class when there is no children', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        icon: "check"
      }));
      var expected = _ButtonModule["default"].iconOnly;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
  });
  describe('with color', function () {
    it('should have hasColor class', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "red",
        children: "abc"
      }));
      var expected = _ButtonModule["default"].hasColor;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
    it('should have not hasColor class', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        children: "abc"
      }));
      var expected = _ButtonModule["default"].hasColor;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).not.toContain(expected);
    });
    it('should have red class', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "red",
        children: "abc"
      }));
      var expected = _ButtonModule["default"].red;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
    it('should have blue class', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "blue",
        children: "abc"
      }));
      var expected = _ButtonModule["default"].blue;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
    it('should have yellow class', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "yellow",
        children: "abc"
      }));
      var expected = _ButtonModule["default"].yellow;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
    it('should have green class', function () {
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        color: "green",
        children: "abc"
      }));
      var expected = _ButtonModule["default"].green;
      var actual = subject.find(_Button.ButtonBase).childAt(0).first().prop('className');
      expect(actual).toContain(expected);
    });
  });
  describe('events', function () {
    test('should call onClick when not disabled', function () {
      var handleClick = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        onClick: handleClick,
        children: "I am a disabled Button"
      }));
      subject.simulate('click');
      var expected = 1;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should not call onClick when disabled', function () {
      var handleClick = jest.fn();
      var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        disabled: true,
        onClick: handleClick,
        children: "I am a disabled Button"
      }));
      subject.simulate('click');
      var expected = 0;
      var actual = handleClick.mock.calls.length;
      expect(actual).toBe(expected);
    });
    test('should have "Select" voice intent in the node of "role=button"', function () {
      var button = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Button["default"], {
        children: "Hello"
      }));
      var expected = 'Select';
      var actual = button.find('[role="button"]').prop('data-webos-voice-intent');
      expect(actual).toBe(expected);
    });
  });
});