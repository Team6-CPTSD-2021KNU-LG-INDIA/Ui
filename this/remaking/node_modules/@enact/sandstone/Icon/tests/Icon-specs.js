"use strict";

var _enzyme = require("enzyme");

var _Icon = require("../Icon");

var _jsxRuntime = require("react/jsx-runtime");

describe('Icon Specs', function () {
  test('should return the correct Unicode value for named icon \'star\'', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: "star"
    }));
    var expected = 983080; // decimal converted charCode of Unicode 'star' character

    var actual = subject.text().codePointAt();
    expect(actual).toBe(expected);
  });
  test('should return the correct Unicode value when provided \'star\' hex value', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: "0x0F0028"
    }));
    var expected = 983080; // decimal converted charCode of character

    var actual = subject.text().codePointAt();
    expect(actual).toBe(expected);
  });
  test('should return the correct Unicode value when provided HTML entity as hex value', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: "\u2605"
    }));
    var expected = 9733; // decimal converted charCode of character

    var actual = subject.text().codePointAt();
    expect(actual).toBe(expected);
  });
  test('should return the correct Unicode value when provided Unicode reference', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: "\\u0F0028"
    }));
    var expected = 983080; // decimal converted charCode of Unicode 'star' character

    var actual = subject.text().codePointAt();
    expect(actual).toBe(expected);
  });
  test('should support high code point Unicode values', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      children: String.fromCodePoint(0x0F0028)
    }));
    var expected = 983080; // decimal converted charCode of Unicode 'star' character

    var actual = subject.text().codePointAt();
    expect(actual).toBe(expected);
  });
  test('should support preset size "large"', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      size: "large",
      children: "star"
    }));
    var expected = 'large';
    var actual = subject.find('.icon').prop('className');
    expect(actual).toContain(expected);
  });
  test('should support preset size "medium"', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      size: "medium",
      children: "star"
    }));
    var expected = 'medium';
    var actual = subject.find('.icon').prop('className');
    expect(actual).toContain(expected);
  });
  test('should support preset size "small"', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      size: "small",
      children: "star"
    }));
    var expected = 'small';
    var actual = subject.find('.icon').prop('className');
    expect(actual).toContain(expected);
  });
  test('should support preset size "tiny"', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      size: "tiny",
      children: "star"
    }));
    var expected = 'tiny';
    var actual = subject.find('.icon').prop('className');
    expect(actual).toContain(expected);
  });
  test('should support arbitrary custom numeric sizes', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      size: 96,
      children: "star"
    }));
    var expected = '--icon-size';
    var actual = subject.find('.icon').prop('style');
    expect(actual).toHaveProperty(expected);
  });
  test('should support arbitrary custom numeric sizes that scale to the correct value', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Icon.IconBase, {
      size: 96,
      children: "star"
    }));
    var expected = '--icon-size';
    var actual = subject.find('.icon').prop('style'); // surprisingly this returns 8rem, instead of what you'd expect
    // with a base pxToRem value of 48px, which would be 2rem.
    // Tests must run at a tiny simulated screen size.

    expect(actual).toHaveProperty(expected, '8rem');
  });
});