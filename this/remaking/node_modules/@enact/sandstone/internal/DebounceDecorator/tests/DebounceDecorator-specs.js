"use strict";

var _enzyme = require("enzyme");

var _ = _interopRequireDefault(require("../"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('DebounceDecorator', function () {
  test('should emit the event after the delay', function (done) {
    var Component = (0, _["default"])({
      debounce: 'onChange',
      delay: 100
    }, function Base() {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
    });
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onChange: spy
    }));
    subject.find('Base').invoke('onChange')();
    expect(spy).not.toHaveBeenCalled();
    setTimeout(function () {
      expect(spy).toHaveBeenCalled();
      done();
    }, 150);
  });
  test('should restart the delay if another event occurs before timeout', function (done) {
    var Component = (0, _["default"])({
      debounce: 'onChange',
      delay: 100
    }, function Base() {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
    });
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onChange: spy
    }));
    setTimeout(function () {
      expect(spy).not.toHaveBeenCalled();
      subject.find('Base').invoke('onChange')();
    }, 50);
    setTimeout(function () {
      expect(spy).not.toHaveBeenCalled();
    }, 125);
    setTimeout(function () {
      expect(spy).toHaveBeenCalled();
      done();
    }, 200);
  });
  test('should not emit the event if the cancel event occurs before the delay', function (done) {
    var Component = (0, _["default"])({
      cancel: 'onCancel',
      debounce: 'onChange',
      delay: 100
    }, function Base() {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
    });
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onChange: spy
    }));
    subject.find('Base').invoke('onChange')();
    subject.find('Base').invoke('onCancel')();
    expect(spy).not.toHaveBeenCalled();
    setTimeout(function () {
      expect(spy).not.toHaveBeenCalled();
      done();
    }, 150);
  });
  test('should emit the onCancel event immediately', function () {
    var Component = (0, _["default"])({
      cancel: 'onCancel',
      debounce: 'onChange',
      delay: 100
    }, function Base() {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {});
    });
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(Component, {
      onCancel: spy
    }));
    subject.find('Base').invoke('onCancel')();
    expect(spy).toHaveBeenCalled();
  });
});