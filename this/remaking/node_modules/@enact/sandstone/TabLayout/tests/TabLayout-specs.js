"use strict";

var _enzyme = require("enzyme");

var _TabLayout = _interopRequireWildcard(require("../TabLayout"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('TabLayout specs', function () {
  it('should be collapsed when collapsed is true', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_TabLayout.TabLayoutBase, {
      collapsed: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Button",
        icon: "demosync",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Button"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Item",
        icon: "playcircle",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Item"
        })
      })]
    }));
    var expected = 'collapsed';
    var actual = subject.find('.tabLayout').prop('className');
    expect(actual).toContain(expected);
  });
  it('should have default orientation of vertical', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_TabLayout.TabLayoutBase, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Button",
        icon: "demosync",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Button"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Item",
        icon: "playcircle",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Item"
        })
      })]
    }));
    var expected = 'vertical';
    var actual = subject.find('.tabLayout').prop('className');
    expect(actual).toContain(expected);
  });
  it('should have orientation of horizontal when orientation is set to horizontal', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_TabLayout.TabLayoutBase, {
      orientation: "horizontal",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Button",
        icon: "demosync",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Button"
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Item",
        icon: "playcircle",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Item"
        })
      })]
    }));
    var expected = 'horizontal';
    var actual = subject.find('.tabLayout').prop('className');
    expect(actual).toContain(expected);
  });
  it('should call onTabAnimationEnd for vertical tabs', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout["default"], {
      orientation: "vertical",
      onTabAnimationEnd: spy,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      })
    }));
    var tabs = subject.find('Cell.tabs').first();
    tabs.simulate('transitionend', {
      target: tabs.getDOMNode(),
      propertyName: 'opacity'
    });
    expect(spy).toHaveBeenCalledTimes(1);
  });
  it('should include expected payload in onTabAnimationEnd', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout["default"], {
      orientation: "vertical",
      onTabAnimationEnd: spy,
      collapsed: true,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      })
    }));
    var tabs = subject.find('Cell.tabs').first();
    tabs.simulate('transitionend', {
      target: tabs.getDOMNode(),
      propertyName: 'opacity'
    });
    var expected = {
      type: 'onTabAnimationEnd',
      collapsed: true
    };
    var actual = spy.mock.calls[0][0];
    expect(actual).toEqual(expected);
  });
  it('should not call onTabAnimationEnd for horizontal tabs', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout["default"], {
      orientation: "horizontal",
      onTabAnimationEnd: spy,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabLayout.Tab, {
        title: "Home",
        icon: "home",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: "Home"
        })
      })
    }));
    var tabs = subject.find('Cell.tabs').first();
    tabs.simulate('transitionend', {
      target: tabs.getDOMNode(),
      propertyName: 'opacity'
    });
    expect(spy).not.toHaveBeenCalled();
  });
});