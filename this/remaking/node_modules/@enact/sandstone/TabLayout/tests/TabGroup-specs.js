"use strict";

var _enzyme = require("enzyme");

var _TabGroup = _interopRequireDefault(require("../TabGroup"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('TabGroup specs', function () {
  it('should only have one icon item when collapsed and vertical orientation when there is a tab without an icon', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      orientation: "vertical",
      collapsed: true,
      tabs: [{
        title: 'Home',
        icon: 'home'
      }, {
        title: 'Button'
      }, {
        title: 'Item',
        icon: 'playcircle'
      }]
    }));
    var expected = 1;
    var actual = subject.find('Tab').length;
    expect(actual).toEqual(expected);
  });
  it('should only have 3 item tabs when 3 tabs were specified', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      tabs: [{
        title: 'Home',
        icon: 'home'
      }, {
        title: 'Button',
        icon: 'demosync'
      }, {
        title: 'Item',
        icon: 'playcircle'
      }]
    }));
    var expected = 3;
    var actual = subject.find('Tab').length;
    expect(actual).toEqual(expected);
  });
  it('should render icons', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      tabs: [{
        title: 'Home',
        icon: 'home'
      }, {
        title: 'Button',
        icon: 'demosync'
      }, {
        title: 'Item',
        icon: 'playcircle'
      }]
    }));
    var expected = 3;
    var actual = subject.find('Icon').length;
    expect(actual).toEqual(expected);
  });
  it('should disable the list icon when collapsed and all tabs are disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      collapsed: true,
      orientation: "vertical",
      tabs: [{
        title: 'Home',
        disabled: true
      }, {
        title: 'Button',
        disabled: true
      }, {
        title: 'Item',
        disabled: true
      }]
    }));
    var expected = true;
    var actual = subject.find('Tab').prop('disabled');
    expect(actual).toBe(expected);
  });
  it('should not disable the list icon when collapsed and all tabs are not disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      collapsed: true,
      orientation: "vertical",
      tabs: [{
        title: 'Home',
        disabled: true
      }, {
        title: 'Button',
        disabled: false
      }, {
        title: 'Item',
        disabled: true
      }]
    }));
    var expected = false;
    var actual = subject.find('Tab').prop('disabled');
    expect(actual).toBe(expected);
  });
  it('should generate keys automatically', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      tabs: [{
        title: 'Home',
        icon: 'home'
      }, {
        title: 'Button',
        icon: 'demosync'
      }, {
        title: 'Item',
        icon: 'playcircle'
      }]
    }));
    var expected = 'tabs_Homehome';
    var actual = subject.find('GroupItem').first().key();
    expect(actual).toEqual(expected);
  });
  it('should use a custom key if supplied', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      tabs: [{
        title: 'Home',
        icon: 'home',
        tabKey: 'myCustomKey'
      }, {
        title: 'Button',
        icon: 'demosync'
      }, {
        title: 'Item',
        icon: 'playcircle'
      }]
    }));
    var expected = 'myCustomKey';
    var actual = subject.find('GroupItem').first().key();
    expect(actual).toEqual(expected);
  });
  it('should support zero as a custom key', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TabGroup["default"], {
      tabs: [{
        title: 'Home',
        icon: 'home',
        tabKey: 0
      }, {
        title: 'Button',
        icon: 'demosync'
      }, {
        title: 'Item',
        icon: 'playcircle'
      }]
    }));
    var expected = '0';
    var actual = subject.find('GroupItem').first().key();
    expect(actual).toEqual(expected);
  });
});