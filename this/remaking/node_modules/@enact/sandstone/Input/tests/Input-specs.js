"use strict";

var _FloatingLayer = require("@enact/ui/FloatingLayer");

var _enzyme = require("enzyme");

var _Input = _interopRequireDefault(require("../Input"));

var _util = require("../util");

var _InputModule = _interopRequireDefault(require("../Input.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var FloatingLayerController = (0, _FloatingLayer.FloatingLayerDecorator)('div');
describe('Input specs', function () {
  test('should be rendered opened if open is set to true', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        open: true
      })
    }));
    var expected = true;
    var actual = subject.find('FloatingLayer').prop('open');
    expect(actual).toBe(expected);
  });
  test('should set title when there is title text', function () {
    var str = 'title text';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        open: true,
        title: str
      })
    }));
    var expected = str;
    var actual = subject.find(".".concat(_InputModule["default"].title)).first().text();
    expect(actual).toBe(expected);
  });
  test('should set title below when there is title below text', function () {
    var str = 'title below text';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        open: true,
        subtitle: str
      })
    }));
    var expected = str;
    var actual = subject.find(".".concat(_InputModule["default"].subtitle)).first().text();
    expect(actual).toBe(expected);
  });
  test('should set value at input when there is value text', function () {
    var str = 'value text';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        open: true,
        value: str
      })
    }));
    var expected = str;
    var actual = subject.find('input').prop('value');
    expect(actual).toBe(expected);
  });
  test('should set placeholder at input when there is placeholder text', function () {
    var str = 'placeholder text';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        open: true,
        placeholder: str
      })
    }));
    var expected = str;
    var actual = subject.find('input').prop('placeholder');
    expect(actual).toBe(expected);
  });
  test('should set type to password at input when input type is "password"', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        open: true,
        type: "password"
      })
    }));
    var expected = 'password';
    var actual = subject.find('input').prop('type');
    expect(actual).toBe(expected);
  });
  test('should set type to url at input when input type is "url"', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        open: true,
        type: "url"
      })
    }));
    var expected = 'url';
    var actual = subject.find('input').prop('type');
    expect(actual).toBe(expected);
  });
  test('should set disabled at button when popup is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
      disabled: true
    }));
    var expected = true;
    var actual = subject.find('[role="button"]').prop('disabled');
    expect(actual).toBe(expected);
  }); // describe('Input specs', () => {

  test('should be rendered opened if open is set to true', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 4
      })
    }));
    var expected = true;
    var actual = subject.find('FloatingLayer').prop('open');
    expect(actual).toBe(expected);
  });
  test('should set title when there is title text', function () {
    var str = 'title text';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 4,
        title: str
      })
    }));
    var expected = str;
    var actual = subject.find(".".concat(_InputModule["default"].title)).first().text();
    expect(actual).toBe(expected);
  });
  test('should set title below when there is title below text', function () {
    var str = 'title below text';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 4,
        subtitle: str
      })
    }));
    var expected = str;
    var actual = subject.find(".".concat(_InputModule["default"].subtitle)).first().text();
    expect(actual).toBe(expected);
  });
  test('should set value at input when there is value text', function () {
    var str = '1234';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 4,
        value: str
      })
    }));
    var expected = str;
    var actual = subject.find(".".concat(_InputModule["default"].numberField)).first().text();
    expect(actual).toBe(expected);
  });
  test('should set disabled at button when the component is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
      type: "number",
      length: 4,
      disabled: true
    }));
    var expected = true;
    var actual = subject.find('[role="button"]').prop('disabled');
    expect(actual).toBe(expected);
  }); // Length, maxLength, and minLength checks

  var prettyProps = function prettyProps(props) {
    return Object.entries(props).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          prop = _ref2[0],
          val = _ref2[1];

      return "".concat(prop, "={").concat(val, "}");
    }).join(', ').replace(/(?:,)\W*([^,]*)$/, (Object.getOwnPropertyNames(props).length > 2 ? ',' : '') + ' and $1');
  };

  var isAre = function isAre(props) {
    return Object.getOwnPropertyNames(props).length > 1 ? 'are' : 'is';
  };

  var lengthChecks = [// [ {Input props}, {expected values to verify, one prop at a time} ]
  [{
    length: void 0
  }, {
    maxLength: _util.DEFAULT_LENGTH,
    minLength: _util.DEFAULT_LENGTH
  }], [{
    length: 3
  }, {
    maxLength: 3,
    minLength: 3
  }], [{
    length: 3,
    maxLength: 6,
    minLength: 2
  }, {
    maxLength: 3,
    minLength: 3
  }], [{
    length: 3,
    maxLength: 6
  }, {
    maxLength: 3,
    minLength: 3
  }], [{
    length: 3,
    minLength: 2
  }, {
    maxLength: 3,
    minLength: 3
  }], [{
    maxLength: 0
  }, {
    maxLength: 0,
    minLength: 0
  }], [{
    minLength: 0
  }, {
    maxLength: _util.DEFAULT_LENGTH,
    minLength: 0
  }], [{
    minLength: 3
  }, {
    maxLength: _util.DEFAULT_LENGTH,
    minLength: 3
  }], [{
    maxLength: 6,
    minLength: 3
  }, {
    maxLength: 6,
    minLength: 3
  }], [{
    maxLength: 2,
    minLength: 5
  }, {
    maxLength: 2,
    minLength: 5
  }]];
  lengthChecks.forEach(function (checklist) {
    var props = checklist[0];
    Object.entries(checklist[1]).forEach(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          prop = _ref4[0],
          val = _ref4[1];

      test("should set `".concat(prop, "` to be `").concat(val, "` for \"number\" type, when ").concat(prettyProps(props), " ").concat(isAre(props), " set"), function () {
        var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], _objectSpread({
            type: "number",
            open: true
          }, props))
        }));
        var expected = val;
        var actual = subject.find('NumberField').first().prop(prop);
        expect(actual).toBe(expected);
      });
    });
  });
  test('should include a submit button when `minLength` !== `maxLength` for number input', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        minLength: 4,
        maxLength: 6,
        open: true
      })
    }));
    var expected = 1;
    var actual = subject.find('.submitButton').first().length;
    expect(actual).toBe(expected);
  });
  test('should include a submit button for implicit joined number input', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        length: 10,
        open: true
      })
    }));
    var expected = 1;
    var actual = subject.find('.submitButton').first().length;
    expect(actual).toBe(expected);
  });
  test('should include a submit button for explicit joined number input', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        length: 4,
        open: true,
        numberInputField: "joined"
      })
    }));
    var expected = 1;
    var actual = subject.find('.submitButton').first().length;
    expect(actual).toBe(expected);
  });
  test('should exclude a submit button when separated number input', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        length: 4,
        open: true
      })
    }));
    var expected = 0;
    var actual = subject.find('.submitButton').first().length;
    expect(actual).toBe(expected);
  });
  test('should exclude a submit button for explicit separated number input', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        length: 10,
        open: true,
        numberInputField: "separated"
      })
    }));
    var expected = 0;
    var actual = subject.find('.submitButton').first().length;
    expect(actual).toBe(expected);
  });
  test('should show an invalid tooltip if invalid and message supplied', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 10,
        invalid: true,
        invalidMessage: "Invalid"
      })
    }));
    var expected = true;
    var actual = subject.find('Tooltip').exists();
    expect(actual).toBe(expected);
  });
  test('should not show invalid tooltip if not invalid but message supplied', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 10,
        invalidMessage: "Invalid"
      })
    }));
    var expected = false;
    var actual = subject.find('Tooltip').exists();
    expect(actual).toBe(expected);
  });
  test('should show an invalid tooltip if invalid and no message supplied', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 10,
        invalid: true
      })
    }));
    var expected = true;
    var actual = subject.find('Tooltip').exists();
    expect(actual).toBe(expected);
  });
  test('should not show an invalid tooltip if invalid and message is falsy', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 10,
        invalid: true,
        invalidMessage: ""
      })
    }));
    var expected = false;
    var actual = subject.find('Tooltip').exists();
    expect(actual).toBe(expected);
  });
  test('should call onComplete when submit button clicked', function (done) {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        minLength: 1,
        maxLength: 4,
        open: true,
        onComplete: spy
      })
    }));
    subject.find({
      children: '1'
    }).first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    subject.find('.submitButton').first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    }); // 250 ms. delay before it's called!

    setTimeout(function () {
      var expected = 1;
      var actual = spy.mock.calls.length;
      expect(actual).toBe(expected);
      done();
    }, 300);
  });
  test('should call onChange when submit button clicked', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        minLength: 1,
        maxLength: 4,
        open: true,
        onChange: spy
      })
    }));
    subject.find({
      children: '1'
    }).first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    subject.find('.submitButton').first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    var expected = '1';
    var actual = spy.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  });
  test('should call onBeforeChange once when input occurs', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        open: true,
        length: 10,
        onBeforeChange: spy
      })
    }));
    subject.find({
      children: '1'
    }).first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    var expected = 1;
    var actual = spy.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should prevent input when onBeforeChange calls preventDefault', function () {
    var spy = jest.fn();
    var mock = jest.fn(function (ev) {
      if (ev.value === '2') {
        ev.preventDefault();
      }
    });
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        minLength: 1,
        maxLength: 4,
        open: true,
        onBeforeChange: mock,
        onChange: spy
      })
    }));
    subject.find({
      children: '2'
    }).first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    subject.find({
      children: '1'
    }).first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    subject.find('.submitButton').first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    var expected = '1';
    var actual = spy.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  });
  test('should delete an input when delete button clicked', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        value: "12",
        minLength: 1,
        maxLength: 4,
        open: true,
        onChange: spy
      })
    }));
    subject.find({
      children: 'backspace'
    }).first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    subject.find('.submitButton').first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    var expected = '1';
    var actual = spy.mock.calls[0][0].value;
    expect(actual).toBe(expected);
  });
  test('should call onBeforeChange when delete button clicked', function () {
    var spy = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        value: "12",
        minLength: 1,
        maxLength: 4,
        open: true,
        onBeforeChange: spy
      })
    }));
    subject.find({
      children: 'backspace'
    }).first().simulate('click', {
      nativeEvent: {
        stopImmediatePropagation: function stopImmediatePropagation() {}
      }
    });
    var expected = 1;
    var actual = spy.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should not include a submit button when noSubmitButton is used', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(FloatingLayerController, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_Input["default"], {
        type: "number",
        length: 4,
        open: true,
        numberInputField: "joined",
        noSubmitButton: true
      })
    }));
    var expected = 0;
    var actual = subject.find('.submitButton').first().length;
    expect(actual).toBe(expected);
  });
});