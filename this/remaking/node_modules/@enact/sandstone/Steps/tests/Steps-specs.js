"use strict";

var _enzyme = require("enzyme");

var _Steps = require("../Steps");

var _StepsModule = _interopRequireDefault(require("../Steps.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var stepSelector = ".".concat(_StepsModule["default"].steps, " > .").concat(_StepsModule["default"].step);
describe('Steps Specs', function () {
  test('should indicate a two step process with no props specified', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {}));
    var expected = 2;
    var actual = subject.find(stepSelector);
    expect(actual).toHaveLength(expected);
  });
  test('should indicate a 6 step process with `total` set to 6', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      total: 6
    }));
    var expected = 6;
    var actual = subject.find(stepSelector);
    expect(actual).toHaveLength(expected);
  });
  test('should correctly set the size', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      size: "medium"
    }));
    var expected = 'medium'; // `size` actually comes from Icon, which we aren't accessing, so we use the bare class name.

    var actual = subject.find("".concat(stepSelector, " div")).first().prop('className');
    expect(actual).toContain(expected);
  });
  test('should correctly indicate the current even if that\'s the only prop set', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      current: 2
    }));
    var expected = 1;
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].current)).first().prop('data-index');
    expect(actual).toBe(expected);
  });
  test('should support custom pastIcon', function () {
    var expected = 'testIconName';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      current: 2,
      total: 3,
      pastIcon: expected
    }));
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].past)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support custom currentIcon', function () {
    var expected = 'testIconName';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      current: 2,
      total: 3,
      currentIcon: expected
    }));
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].current)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support custom futureIcon', function () {
    var expected = 'testIconName';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      current: 2,
      total: 3,
      futureIcon: expected
    }));
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].future)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support numeric step identifier for pastIcon', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      current: 2,
      total: 3,
      pastIcon: "numbers"
    }));
    var expected = '1';
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].past)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support numeric step identifier for currentIcon', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      current: 2,
      total: 3,
      currentIcon: "numbers"
    }));
    var expected = '2';
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].current)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support numeric step identifier for futureIcon', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      current: 2,
      total: 3,
      futureIcon: "numbers"
    }));
    var expected = '3';
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].future)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support number for `skip` prop', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      skip: 2,
      current: 3,
      total: 5
    }));
    var expected = _StepsModule["default"].skip;
    var actual = subject.find(stepSelector).at(1).prop('className');
    expect(actual).toContain(expected);
  });
  test('should support custom skipIcon', function () {
    var expected = 'testIconName';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      skip: 2,
      skipIcon: expected,
      current: 3,
      total: 5
    }));
    var actual = subject.find(stepSelector).at(1).text();
    expect(actual).toBe(expected);
  });
  test('should support number for `skip` prop', function () {
    var expected = 'testIconName';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      skip: 2,
      skipIcon: expected,
      current: 3,
      total: 5
    }));
    var actual = subject.find(stepSelector).at(1).text();
    expect(actual).toBe(expected);
  });
  test('should support array of numbers for `skip` prop', function () {
    var expected = 'testIconName';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      skip: [2, 4],
      skipIcon: expected,
      current: 3,
      total: 5
    }));
    var actual = subject.find(stepSelector).at(1).text();
    expect(actual).toBe(expected);
  });
  test('should not show a skip icon if the current step is in the skip list', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Steps.StepsBase, {
      skip: [2, 3],
      skipIcon: "testIconName",
      current: 3,
      currentIcon: "numbers",
      total: 5
    }));
    var expected = '3';
    var actual = subject.find("".concat(stepSelector, ".").concat(_StepsModule["default"].current)).first().text();
    expect(actual).toBe(expected);
  });
});