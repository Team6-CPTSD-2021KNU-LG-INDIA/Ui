"use strict";

var _i18n = _interopRequireDefault(require("@enact/i18n"));

var _enzyme = require("enzyme");

var _DayPicker = _interopRequireWildcard(require("../DayPicker"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('DayPicker', function () {
  test('should not select any item when there is no passed prop `selected`', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {}));
    var selected = subject.find('CheckboxItem').find({
      'selected': true
    });
    expect(selected.debug()).toBeFalsy();
  });
  test('should select day when passed prop `selected`', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      selected: [1]
    }));
    var secondCheckboxItem = subject.find('CheckboxItem').find({
      'data-index': 1
    }).first();
    var selected = secondCheckboxItem.props().selected;
    expect(selected).toBe(true);
  });
  test('should emit an onSelect event when selecting days', function () {
    var handleSelect = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      onSelect: handleSelect
    }));
    var item = subject.find('CheckboxItem').find({
      'data-index': 1
    }).first();
    item.simulate('click');
    expect(handleSelect).toHaveBeenCalled();
  });
  test('should include `content` in onSelect event payload which respects dayNameLength', function () {
    var handleSelect = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DayPicker["default"], {
      onSelect: handleSelect,
      dayNameLength: "short"
    })); // select Monday

    var item = subject.find('CheckboxItem').find({
      'data-index': 1
    }).first();
    item.simulate('click');
    var expected = {
      // M is the "short" value from ilib for Monday
      content: 'M'
    };
    var actual = handleSelect.mock.calls[0][0];
    expect(actual).toMatchObject(expected);
  });
  test('should return `None` when selected is null', function () {
    var label = (0, _DayPicker.getSelectedDayString)(null, 'None');
    var expected = 'None';
    expect(label).toBe(expected);
  });
  test('should return `None` when selected is empty', function () {
    var label = (0, _DayPicker.getSelectedDayString)([], 'None');
    var expected = 'None';
    expect(label).toBe(expected);
  });
  test('should return `Every Weekend` when all selected', function () {
    var selected = [0, 6];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Weekend';
    expect(label).toBe(expected);
  });
  test('should return `Every Weekday` when all selected', function () {
    var selected = [1, 2, 3, 4, 5];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Weekday';
    expect(label).toBe(expected);
  });
  test('should return `Every Day` when all selected', function () {
    var selected = [0, 1, 2, 3, 4, 5, 6];
    var label = (0, _DayPicker.getSelectedDayString)(selected);
    var expected = 'Every Day';
    expect(label).toBe(expected);
  }); // ilib isn't working correctly with unit tests so this block must be skipped

  describe.skip('with alternate first day of week', function () {
    test('should accept and emit a generalized selected array', function () {
      _i18n["default"].setLocale('es-ES');

      var handleSelect = jest.fn();
      var subject = (0, _enzyme.mount)(
      /*#__PURE__*/
      // select Sunday by default
      (0, _jsxRuntime.jsx)(_DayPicker["default"], {
        onSelect: handleSelect,
        defaultSelected: [0]
      })); // select Lunes (Monday) which is the first day of the week for es-ES

      var item = subject.find('CheckboxItem').find({
        'data-index': 0
      }).first();
      item.simulate('click');
      var expected = {
        // Expect Sunday (0) and Monday (1) to be selected
        selected: [0, 1]
      };
      var actual = handleSelect.mock.calls[0][0]; // If ilib isn't loading correctly, actual will be null because we will have unselected
      // Sunday instead of selecting Monday.

      expect(actual).toMatchObject(expected);
    });
  });
});