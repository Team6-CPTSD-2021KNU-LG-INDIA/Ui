"use strict";

var _enzyme = require("enzyme");

var _Item = require("../Item");

var _ItemModule = _interopRequireDefault(require("../Item.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('Item Specs', function () {
  test('should support adding text as a child', function () {
    var expected = 'Hello Item';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      children: expected
    }));
    var actual = subject.text();
    expect(actual).toBe(expected);
  });
  test('should support adding a `label`', function () {
    var expected = 'Example Label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      label: expected,
      children: "Hello Item"
    }));
    var actual = subject.find(".".concat(_ItemModule["default"].label)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support label with 0', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      label: 0,
      children: "Hello Item"
    }));
    var expected = '0';
    var actual = subject.find(".".concat(_ItemModule["default"].label)).first().text();
    expect(actual).toContain(expected);
  });
  test('should support adding text as a child when a label is also set', function () {
    var expected = 'Hello Item';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      label: "Example Label",
      children: expected
    }));
    var actual = subject.find(".".concat(_ItemModule["default"].content)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support `slotBefore`', function () {
    var expected = 'slot before';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      slotBefore: expected,
      children: "Hello Item"
    }));
    var actual = subject.find(".".concat(_ItemModule["default"].slotBefore)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support `slotAfter`', function () {
    var expected = 'slot after';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      slotAfter: expected,
      children: "Hello Item"
    }));
    var actual = subject.find(".".concat(_ItemModule["default"].slotAfter)).first().text();
    expect(actual).toBe(expected);
  });
  test('should support repositioning of the label', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      labelPosition: "above",
      label: "my label",
      children: "Hello Item"
    }));
    var expected = _ItemModule["default"].labelAbove;
    var actual = subject.find(".".concat(_ItemModule["default"].itemContent)).first().prop('className');
    expect(actual).toContain(expected);
  });
  test('should not include the selected class when not selected', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      children: "Hello Item"
    }));
    var expected = _ItemModule["default"].selected;
    var actual = subject.first().prop('className');
    expect(actual).not.toContain(expected);
  });
  test('should add the selected class when given the selected prop', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      selected: true,
      children: "Hello Item"
    }));
    var expected = _ItemModule["default"].selected;
    var actual = subject.first().prop('className');
    expect(actual).toContain(expected);
  });
  it('should have apply small class when small', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      size: "small"
    }));
    var expected = 'small';
    var actual = subject.first().prop('className');
    expect(actual).toContain(expected);
  });
  test('should support RTL text', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Item.ItemBase, {
      children: "Hello \u05DE\u05E6\u05D1 \u05EA\u05DE\u05D5\u05E0\u05D4"
    }));
    var expected = 'rtl';
    var actual = subject.find('.text').prop('style');
    expect(actual).toHaveProperty('direction', expected);
  });
});