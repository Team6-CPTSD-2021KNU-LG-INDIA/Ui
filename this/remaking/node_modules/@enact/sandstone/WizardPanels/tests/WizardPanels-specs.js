"use strict";

var _enzyme = require("enzyme");

var _ = require("../");

var _jsxRuntime = require("react/jsx-runtime");

describe('WizardPanel Specs', function () {
  var findNextButton = function findNextButton(subject) {
    return subject.find('.slotAfter').find('Pure').first();
  };

  var findPrevButton = function findPrevButton(subject) {
    return subject.find('.slotBefore').find('Pure').first();
  };

  test('should have title in `Header`', function () {
    var title = 'WizardPanel title';
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanels, {
      title: title,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})
    }));
    var headerTitle = wizardPanel.find('Header').prop('title');
    var expected = title;
    var actual = headerTitle;
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should have title overridden by title set in `View`', function () {
    var wizardTitle = 'WizardPanel title';
    var viewTitle = 'View title';
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanels, {
      title: wizardTitle,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        title: viewTitle
      })
    }));
    var headerTitle = wizardPanel.find('Header').prop('title');
    var expected = viewTitle;
    var actual = headerTitle;
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should have subtitle from `View`', function () {
    var viewSubtitle = 'View subtitle';
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanels, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        subtitle: viewSubtitle
      })
    }));
    var headerSubtitle = wizardPanel.find('Header').prop('subtitle');
    var expected = viewSubtitle;
    var actual = headerSubtitle;
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should have View buttons rendered in footer', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanels, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("footer", {
          children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            children: "Button 1"
          }), /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
            children: "Button 2"
          })]
        })
      })
    }));
    var buttons = wizardPanel.find('.footer').find('button');
    var expected = 2;
    var actual = buttons.length;
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should have View contents rendered in `.content`', function () {
    var contentText = 'content';
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanels, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: contentText
      })
    }));
    var content = wizardPanel.find('.content').find('.enact-fit').text();
    var expected = contentText;
    var actual = content;
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should not hide next button on the last view when `nextButton` prop is added on the last Panel', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 2,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        nextButton: true,
        children: "Last"
      })]
    }));
    var nextButton = findNextButton(wizardPanel);
    var expected = true;
    var actual = nextButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should hide next button on the last view', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 2,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Last!"
      })]
    }));
    var nextButton = findNextButton(wizardPanel);
    var expected = false;
    var actual = nextButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should hide previous button on the first view', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 0,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Last!"
      })]
    }));
    var prevButton = findPrevButton(wizardPanel);
    var expected = false;
    var actual = prevButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should show next button on the first view', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 0,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Last!"
      })]
    }));
    var nextButton = findNextButton(wizardPanel);
    var expected = true;
    var actual = nextButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should not hide previous button on the first view when `prevButton` prop is added on the first Panel', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 0,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        prevButton: true,
        children: "Panel 1"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 3"
      })]
    }));
    var prevButton = findPrevButton(wizardPanel);
    var expected = true;
    var actual = prevButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should hide next nextButton on all the panels with `nextButtonVisibility` set to never', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      nextButtonVisibility: "never",
      index: 1,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 1"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 3"
      })]
    }));
    var nextButton = findNextButton(wizardPanel);
    var expected = false;
    var actual = nextButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should hide previous button on all the panels with `prevButtonVisibility` set to never', function () {
    var wizardPanel = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanels, {
      index: 2,
      prevButtonVisibility: "never",
      totalPanels: 4
    }));
    var prevButton = findPrevButton(wizardPanel);
    var expected = false;
    var actual = prevButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should hide previous button on the second Panel when panel overrides', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      defaultIndex: 1,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 1"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        prevButton: false,
        children: "Panel 2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 3"
      })]
    }));
    var prevButton = findPrevButton(wizardPanel);
    var expected = false;
    var actual = prevButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should show previous button on the first view when `prevButtonVisibility` prop is set to always', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 0,
      prevButtonVisibility: "always",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 1"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 3"
      })]
    }));
    var prevButton = findPrevButton(wizardPanel);
    var expected = true;
    var actual = prevButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should hide previous button on the first view when `prevButtonVisibility` prop is set to always and panel overrides', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 0,
      prevButtonVisibility: "always",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        prevButton: false,
        children: "Panel 1"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 3"
      })]
    }));
    var prevButton = findPrevButton(wizardPanel);
    var expected = false;
    var actual = prevButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should show next button on the last view when `nextButtonVisibility` prop is set to always', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 2,
      nextButtonVisibility: "always",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 1"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 3"
      })]
    }));
    var nextButton = findNextButton(wizardPanel);
    var expected = true;
    var actual = nextButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should show next button on the last view when `nextButtonVisibility` prop is set to always and panel overrides', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 2,
      nextButtonVisibility: "always",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 1"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "Panel 2"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        nextButton: false,
        children: "Panel 3"
      })]
    }));
    var nextButton = findNextButton(wizardPanel);
    var expected = false;
    var actual = nextButton.exists();
    wizardPanel.unmount();
    expect(actual).toBe(expected);
  });
  test('should fire onWillTransition with target index', function () {
    var spy = jest.fn();
    var index = 0;
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: index,
      onWillTransition: spy,
      noAnimation: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents2"
      })]
    }));
    spy.mockClear();
    index++;
    wizardPanel.setProps({
      index: index
    });
    var expected = {
      index: index
    };
    var actual = spy.mock.calls.length && spy.mock.calls[0][0];
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should fire onTransition with target index', function () {
    var spy = jest.fn();
    var index = 0;
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: index,
      onTransition: spy,
      noAnimation: true,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {
        children: "I gots contents2"
      })]
    }));
    spy.mockClear();
    index++;
    wizardPanel.setProps({
      index: index
    });
    var expected = {
      index: index
    };
    var actual = spy.mock.calls.length && spy.mock.calls[0][0];
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should advance on next click', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    findNextButton(wizardPanel).simulate('click');
    var expected = {
      current: 2
    };
    var actual = wizardPanel.find('Steps').props();
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should go back on prev click', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      defaultIndex: 1,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    findPrevButton(wizardPanel).simulate('click');
    var expected = {
      current: 1
    };
    var actual = wizardPanel.find('Steps').props();
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should go back on back key', function () {
    var map = {};
    window.addEventListener = jest.fn(function (event, cb) {
      map[event] = cb;
    });
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      defaultIndex: 1,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    map.keyup({
      type: 'keyup',
      currentTarget: window,
      keyCode: 27
    });
    wizardPanel.update();
    var expected = {
      current: 1
    };
    var actual = wizardPanel.find('Steps').props();
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should not go back on back key when prevButtonVisibility set to show never', function () {
    var map = {};
    window.addEventListener = jest.fn(function (event, cb) {
      map[event] = cb;
    });
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      defaultIndex: 1,
      prevButtonVisibility: "never",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    map.keyup({
      type: 'keyup',
      currentTarget: window,
      keyCode: 27
    });
    wizardPanel.update();
    var expected = {
      current: 1
    };
    var actual = wizardPanel.find('Steps').props();
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should go back on back key when onBack does not call preventDefault', function () {
    var map = {};
    window.addEventListener = jest.fn(function (event, cb) {
      map[event] = cb;
    });
    var spy = jest.fn();
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      defaultIndex: 1,
      onBack: spy,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    map.keyup({
      type: 'keyup',
      currentTarget: window,
      keyCode: 27
    });
    wizardPanel.update();
    var expected = {
      current: 1
    };
    var actual = wizardPanel.find('Steps').props();
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should not go back on back key when onBack calls preventDefault', function () {
    var map = {};
    window.addEventListener = jest.fn(function (event, cb) {
      map[event] = cb;
    });
    var spy = jest.fn(function (ev) {
      return ev.preventDefault();
    });
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      defaultIndex: 1,
      onBack: spy,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    map.keyup({
      type: 'keyup',
      currentTarget: window,
      keyCode: 27
    });
    wizardPanel.update();
    var expected = {
      current: 2
    };
    var actual = wizardPanel.find('Steps').props();
    wizardPanel.unmount();
    expect(actual).toMatchObject(expected);
  });
  test('should support noAnimation', function () {
    // FIXME: Temporary selector until our components have corrected display names
    var viewManager = '.content > *';
    var wizardPanel = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanelsBase, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})
    }));
    var actual = wizardPanel.find(viewManager).prop('noAnimation');
    expect(actual).toBeFalsy();
    wizardPanel.setProps({
      noAnimation: true
    });
    actual = wizardPanel.find(viewManager).prop('noAnimation');
    expect(actual).toBe(true);
  }); // [GT-28312]

  test('should reflect the current index in Steps when "current" is not specified', function () {
    var index = 1;
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: index,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    var expected = {
      current: index + 1
    };
    var actual = wizardPanel.find('Steps').props();
    expect(actual).toMatchObject(expected);
  });
  test('should reflect the specified index in Steps when "current" is set', function () {
    var current = 3;
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 0,
      current: current,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    var expected = {
      current: current
    };
    var actual = wizardPanel.find('Steps').props();
    expect(actual).toMatchObject(expected);
  });
  test('should reflect the total views in Steps when "total" is not specified', function () {
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 1,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    var expected = {
      total: 5
    };
    var actual = wizardPanel.find('Steps').props();
    expect(actual).toMatchObject(expected);
  });
  test('should reflect the specified total in Steps when "total" is set', function () {
    var total = 3;
    var wizardPanel = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsxs)(_.WizardPanels, {
      index: 1,
      current: 1,
      total: total,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})]
    }));
    var expected = {
      total: total
    };
    var actual = wizardPanel.find('Steps').props();
    expect(actual).toMatchObject(expected);
  });
  test('should return a ref to the root Panel node', function () {
    var ref = jest.fn();
    (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_.WizardPanels, {
      ref: ref,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_.Panel, {})
    }));
    var expected = 'ARTICLE';
    var actual = ref.mock.calls[0][0].nodeName;
    expect(actual).toBe(expected);
  });
});