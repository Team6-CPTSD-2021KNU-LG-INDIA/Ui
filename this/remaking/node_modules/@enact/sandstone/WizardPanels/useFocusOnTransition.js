"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFocusOnTransition = useFocusOnTransition;
exports["default"] = void 0;

var _handle = _interopRequireWildcard(require("@enact/core/handle"));

var _useHandlers = _interopRequireDefault(require("@enact/core/useHandlers"));

var _spotlight = _interopRequireDefault(require("@enact/spotlight"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var transition = function transition(complete) {
  return function (ev, props, _ref) {
    var setTransition = _ref.setTransition;
    setTransition(complete);
    return true;
  };
};

var transitionHandlers = {
  onTransition: (0, _handle["default"])((0, _handle.forward)('onTransition'), transition(true)),
  onWillTransition: (0, _handle["default"])((0, _handle.forward)('onWillTransition'), transition(false), function (ev, props, _ref2) {
    var current = _ref2.current;
    clearTimeout(current.timerId);

    var currentSpotlight = _spotlight["default"].getCurrent();

    if (!_spotlight["default"].getPointerMode() && currentSpotlight) {
      currentSpotlight.blur();
    }
  })
};

function useFocusOnTransition(config) {
  var _useRef = (0, _react.useRef)({
    timerId: null,
    index: config.index
  }),
      current = _useRef.current;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      complete = _useState2[0],
      setTransition = _useState2[1];

  var handlers = (0, _useHandlers["default"])(transitionHandlers, config, {
    setTransition: setTransition,
    current: current
  });
  var focusIndex = current.index !== config.index && config.noAnimation ? config.index : -1;
  (0, _react.useEffect)(function () {
    if (complete) {
      // FIXME: onTransition fires while the departing view still exists so focusing the Panel
      // will generally result in focusing a component in the departing view because it is
      // first in DOM order.
      //
      // Deferring a tick allows that view to be removed but this is not an ideal solution.
      current.timerId = setTimeout(function () {
        var currentSpotlight = _spotlight["default"].getCurrent();

        if (config.spotlightId && !currentSpotlight) {
          _spotlight["default"].focus(config.spotlightId);
        }
      }, 16);
    }

    return function () {
      return clearTimeout(current.timerId);
    };
  }, [complete, config.spotlightId, focusIndex, current]);
  return handlers;
}

var _default = useFocusOnTransition;
exports["default"] = _default;