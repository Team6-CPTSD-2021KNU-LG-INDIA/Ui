"use strict";

var _enzyme = require("enzyme");

var _Dropdown = require("../Dropdown");

var _DropdownList = _interopRequireDefault(require("../DropdownList"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var children = ['option1', 'option2', 'option3'];
var placeholder = 'Dropdown select';
var title = 'Options';
describe('Dropdown', function () {
  test('should have default `placeholder` when a value is not provided', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      children: children
    }));
    var expected = 'No Selection';
    var actual = dropDown.find('DropdownButton').prop('children');
    expect(actual).toBe(expected);
  });
  test('should have `placeholder` when a value is provided', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      placeholder: placeholder,
      children: children
    }));
    var expected = placeholder;
    var actual = dropDown.find('DropdownButton').prop('children');
    expect(actual).toBe(expected);
  });
  test('should have `title`', function () {
    var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      children: children
    }));
    var expected = title;
    var actual = dropDown.find('.heading').text();
    expect(actual).toBe(expected);
  });
  test('should apply id to dropdown', function () {
    var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      id: "drop",
      children: children
    }));
    var expected = 'drop'; // NOTE: Using `#id` as a find will pass because Enzyme will find the id prop and use that
    // instead of what is rendered into the DOM.

    var actual = dropDown.getDOMNode().id;
    expect(actual).toBe(expected);
  });
  test('should apply aria label id to `title`', function () {
    var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      id: "drop",
      children: children
    }));
    var expected = true;
    var actual = dropDown.find('#drop_title').exists();
    expect(actual).toBe(expected);
  });
  test('should apply aria-labeled-by to dropdown with title', function () {
    var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      id: "drop",
      children: children
    }));
    var expected = true;
    var actual = dropDown.find('[aria-labelledby="drop_title"]').exists();
    expect(actual).toBe(expected);
  });
  test('should not apply aria-labeled-by when no title exists', function () {
    var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      id: "drop",
      children: children
    }));
    var expected = false;
    var actual = dropDown.find('[aria-labelledby]').exists();
    expect(actual).toBe(expected);
  });
  test('should have `placeholder` when `children` is invalid', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      placeholder: placeholder,
      children: null
    }));
    var expected = placeholder;
    var actual = dropDown.find('DropdownButton').prop('children');
    expect(actual).toBe(expected);
  });
  test('should have `placeholder` that reflects `selected` option', function () {
    var selectedIndex = 1;
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      selected: selectedIndex,
      children: children
    }));
    var expected = children[selectedIndex];
    var actual = dropDown.find('DropdownButton').prop('children');
    expect(actual).toBe(expected);
  });
  test('should have `placeholder` when `selected` is invalid', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      placeholder: placeholder,
      selected: -1,
      children: children
    }));
    var expected = placeholder;
    var actual = dropDown.find('DropdownButton').prop('children');
    expect(actual).toBe(expected);
  });
  test('should be disabled when `children` is omitted', function () {
    var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title
    }));
    var expected = true;
    var actual = dropDown.find('DropdownButton').prop('disabled');
    expect(actual).toBe(expected);
  });
  test('should be disabled when there are no `children`', function () {
    var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      children: []
    }));
    var expected = true;
    var actual = dropDown.find('DropdownButton').prop('disabled');
    expect(actual).toBe(expected);
  });
  test('should update when children are added', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.Dropdown, {
      title: title,
      children: children
    }));
    var updatedChildren = children.concat('option4', 'option5');
    dropDown.setProps({
      children: updatedChildren
    });
    var expected = 5;
    var actual = dropDown.children().length;
    expect(actual).toBe(expected);
  });
  test('should set the `role` of items to "checkbox"', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      defaultOpen: true,
      children: ['item']
    }));
    var expected = 'checkbox';
    var actual = dropDown.find('DropdownButton').prop('popupProps').children[0].role;
    expect(actual).toBe(expected);
  });
  test('should set the `aria-checked` state of the `selected` item', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      selected: 0,
      children: ['item']
    }));
    var expected = true;
    var actual = dropDown.find('DropdownButton').prop('popupProps').children[0]['aria-checked'];
    expect(actual).toBe(expected);
  });
  test('should pass through members of child objects to props for each item', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      children: [{
        disabled: true,
        children: 'child',
        key: 'item-0'
      }]
    }));
    var expected = true;
    var actual = dropDown.find('DropdownButton').prop('popupProps').children[0].disabled;
    expect(actual).toBe(expected);
  });
  test('should allow members in child object to override injected aria values', function () {
    var dropDown = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Dropdown.DropdownBase, {
      title: title,
      selected: 0,
      children: [{
        disabled: true,
        children: 'child',
        key: 'item-0',
        role: 'button',
        'aria-checked': false
      }]
    }));
    var expected = {
      role: 'button',
      'aria-checked': false
    };
    var actual = dropDown.find('DropdownButton').prop('popupProps').children[0];
    expect(actual).toMatchObject(expected);
  });
  describe('DropdownList', function () {
    test('should include `data` and `selected` in `onSelect` callback', function () {
      var handler = jest.fn();
      var dropDown = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DropdownList["default"], {
        onSelect: handler,
        children: children
      }));
      dropDown.find('Item').at(0).simulate('click');
      var expected = {
        data: 'option1',
        selected: 0
      };
      var actual = handler.mock.calls[0][0];
      expect(actual).toEqual(expected);
    });
  });
});