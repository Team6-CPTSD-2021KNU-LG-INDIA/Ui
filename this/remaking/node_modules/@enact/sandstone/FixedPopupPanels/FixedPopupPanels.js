"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panel = exports.Header = exports.FixedPopupPanelsDecorator = exports.FixedPopupPanelsBase = exports.FixedPopupPanels = exports["default"] = void 0;

var _handle = require("@enact/core/handle");

var _useHandlers = _interopRequireDefault(require("@enact/core/useHandlers"));

var _I18nDecorator = require("@enact/i18n/I18nDecorator");

var _target = require("@enact/spotlight/src/target");

var _compose = _interopRequireDefault(require("ramda/src/compose"));

var _Panels = require("../internal/Panels");

var _Panel = _interopRequireDefault(require("../Panels/Panel"));

var _Header = _interopRequireDefault(require("../Panels/Header"));

var _FixedPopupPanelsModule = _interopRequireDefault(require("./FixedPopupPanels.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Adds popup functionality and `rtl` prop to [`FixedPopupPanels`]{@link sandstone/FixedPopupPanels}.
 *
 * @class FixedPopupPanelsDecorator
 * @memberof sandstone/FixedPopupPanels
 * @hoc
 * @public
 */
var FixedPopupPanelsDecorator = (0, _compose["default"])((0, _I18nDecorator.I18nContextDecorator)({
  rtlProp: 'rtl'
}), (0, _Panels.PopupDecorator)({
  className: 'fixedPopupPanels',
  css: _FixedPopupPanelsModule["default"],
  noAlertRole: true,
  panelArranger: _Panels.BasicArranger,
  panelType: 'fixedPopup'
}));
exports.FixedPopupPanelsDecorator = FixedPopupPanelsDecorator;
var fixedPopupPanelsHandlers = {
  onKeyDown: (0, _handle.handle)((0, _handle.forward)('onKeyDown'), (0, _handle.forProp)('rtl', false), (0, _handle.forKey)('left'), function (ev, _ref) {
    var index = _ref.index;
    return index > 0;
  }, function (_ref2) {
    var target = _ref2.target;
    return document.querySelector("section.".concat(_FixedPopupPanelsModule["default"].body)).contains(target);
  }, function (_ref3) {
    var target = _ref3.target;
    return (0, _target.getTargetByDirectionFromElement)('left', target) === null;
  }, (0, _handle.forward)('onBack'), _handle.stop)
};
/**
 * A base panels component for [`FixedPopupPanels`]{@link sandstone/FixedPopupPanels} that has
 * left key handler to navigate panels.
 *
 * @class FixedPopupPanelsBase
 * @memberof sandstone/FixedPopupPanels
 * @ui
 * @public
 */

var FixedPopupPanelsBase = function FixedPopupPanelsBase(props) {
  var handlers = (0, _useHandlers["default"])(fixedPopupPanelsHandlers, props);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panels.Viewport, _objectSpread(_objectSpread({}, props), handlers));
};
/**
 * An instance of [`Panels`]{@link sandstone/Panels.Panels} which restricts the `Panel` to the right
 * or left side of the screen inside a popup. Typically used for overlaying panels over other
 * content.
 *
 * @class FixedPopupPanels
 * @memberof sandstone/FixedPopupPanels
 * @extends sandstone/FixedPopupPanels.FixedPopupPanelsBase
 * @mixes sandstone/FixedPopupPanels.FixedPopupPanelsDecorator
 * @ui
 * @public
 */


exports.FixedPopupPanelsBase = FixedPopupPanelsBase;
var FixedPopupPanels = FixedPopupPanelsDecorator(FixedPopupPanelsBase);
/**
 * Size of the popup.
 *
 * @memberof sandstone/FixedPopupPanels.FixedPopupPanels.prototype
 * @name width
 * @type {('narrow'|'half')}
 * @default 'narrow'
 * @public
 */

/**
 * The standard view container used inside a
 * [FixedPopupPanels]{@link sandstone/FixedPopupPanels.FixedPopupPanels} view manager instance.
 *
 * @class Panel
 * @extends sandstone/Panels.Panel
 * @memberof sandstone/FixedPopupPanels
 * @ui
 * @public
 */

exports.FixedPopupPanels = FixedPopupPanels;

var Panel = function Panel(props) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Panel["default"], _objectSpread(_objectSpread({}, props), {}, {
    css: _FixedPopupPanelsModule["default"],
    hideChildren: false
  }));
};
/**
 * A shortcut to access {@link sandstone/FixedPopupPanels.Panel}
 *
 * @name Panel
 * @static
 * @memberof sandstone/FixedPopupPanels.FixedPopupPanels
 */


exports.Panel = Panel;
FixedPopupPanels.Panel = Panel;
/**
 * A header component for a Panel with a `title` and `subtitle`, supporting several configurable
 * [`slots`]{@link ui/Slottable.Slottable} for components.
 *
 * @class Header
 * @extends sandstone/Panels.Header
 * @memberof sandstone/FixedPopupPanels
 * @ui
 * @public
 */

var Header = function Header(props) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Header["default"], _objectSpread(_objectSpread({
    type: "compact"
  }, props), {}, {
    css: _FixedPopupPanelsModule["default"]
  }));
}; // Relay the defaultSlot property to our version of Header


exports.Header = Header;
Header.defaultSlot = _Header["default"].defaultSlot;
/**
 * A shortcut to access {@link sandstone/FixedPopupPanels.Header}
 *
 * @name Header
 * @static
 * @memberof sandstone/FixedPopupPanels.FixedPopupPanels
 */

FixedPopupPanels.Header = Header;
var _default = FixedPopupPanels;
exports["default"] = _default;