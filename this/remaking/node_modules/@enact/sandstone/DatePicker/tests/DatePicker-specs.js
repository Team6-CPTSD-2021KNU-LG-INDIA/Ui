"use strict";

var _enzyme = require("enzyme");

var _ilib = _interopRequireDefault(require("ilib"));

var _DatePicker = _interopRequireWildcard(require("../DatePicker"));

var _DatePickerModule = _interopRequireDefault(require("../DatePicker.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Note: Tests pass 'locale' because there's no I18nDecorator to provide a value via context and
// otherwise, nothing renders in the label.
describe('DatePicker', function () {
  test('should emit an onChange event when changing a component picker', function () {
    var handleChange = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      onChange: handleChange,
      value: new Date(2000, 6, 15),
      locale: "en-US"
    }));
    var base = subject.find('DateComponentRangePicker').first();
    base.prop('onChange')({
      value: 0
    });
    var expected = 1;
    var actual = handleChange.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should accept a JavaScript Date for its value prop', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: new Date(2000, 0, 1),
      locale: "en-US"
    }));
    var yearPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].year));
    var expected = 2000;
    var actual = yearPicker.prop('value');
    expect(actual).toBe(expected);
  });
  test('should set "dayAriaLabel" to day picker', function () {
    var label = 'custom day aria-label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      dayAriaLabel: label,
      value: new Date(2000, 0, 1)
    }));
    var dayPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].day));
    var expected = label;
    var actual = dayPicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "monthAriaLabel" to month picker', function () {
    var label = 'custom month aria-label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      monthAriaLabel: label,
      value: new Date(2000, 0, 1)
    }));
    var monthPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].month));
    var expected = label;
    var actual = monthPicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "yearAriaLabel" to year picker', function () {
    var label = 'custom year aria-label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: new Date(2000, 0, 1),
      yearAriaLabel: label
    }));
    var yearPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].year));
    var expected = label;
    var actual = yearPicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "monthAriaLabel" to month picker', function () {
    var label = 'custom month label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      monthAriaLabel: label,
      value: new Date(2000, 0, 1)
    }));
    var monthPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].month));
    var expected = label;
    var actual = monthPicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "yearAriaLabel" to year picker', function () {
    var label = 'custom year label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: new Date(2000, 0, 1),
      yearAriaLabel: label
    }));
    var yearPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].year));
    var expected = label;
    var actual = yearPicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "data-webos-voice-disabled" to day picker when voice control is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: new Date(2000, 0, 1),
      "data-webos-voice-disabled": true
    }));
    var dayPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].day));
    var expected = true;
    var actual = dayPicker.prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should set "data-webos-voice-disabled" to month picker when voice control is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: new Date(2000, 0, 1),
      "data-webos-voice-disabled": true
    }));
    var monthPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].month));
    var expected = true;
    var actual = monthPicker.prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should set "data-webos-voice-disabled" to year picker when voice control is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: new Date(2000, 0, 1),
      "data-webos-voice-disabled": true
    }));
    var yearPicker = subject.find("DateComponentRangePicker.".concat(_DatePickerModule["default"].year));
    var expected = true;
    var actual = yearPicker.prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should format a date the same as the label', function () {
    var date = new Date(2000, 0, 1);
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: date,
      locale: "en-US"
    }));
    var expected = subject.find('Heading').text();
    var actual = (0, _DatePicker.dateToLocaleString)(date);
    expect(actual).toBe(expected);
  });
  test('should format a date the same as the label in another locale', function () {
    _ilib["default"].setLocale('ar-SA');

    var date = new Date(2000, 0, 1);
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: date,
      locale: "ar-SA"
    }));
    var expected = subject.find('Heading').text();
    var actual = (0, _DatePicker.dateToLocaleString)(date);
    expect(actual).toBe(expected);
  });
  test('should not display Heading', function () {
    var date = new Date(2000, 0, 1);
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_DatePicker["default"], {
      value: date,
      locale: "en-US",
      noLabel: true
    }));
    var expected = false;
    var actual = subject.find('Heading').exists();
    expect(actual).toBe(expected);
  });
});