"use strict";

var _enzyme = require("enzyme");

var _Checkbox = require("../Checkbox");

var _CheckboxModule = _interopRequireDefault(require("../Checkbox.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

describe('CheckboxItem Specs', function () {
  test('should not include the selected class when not selected', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {}));
    var expected = _CheckboxModule["default"].selected;
    var actual = subject.prop('className');
    expect(actual).not.toContain(expected);
  });
  test('should add the selected class when given the selected prop', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {
      selected: true
    }));
    var expected = _CheckboxModule["default"].selected;
    var actual = subject.prop('className');
    expect(actual).toContain(expected);
  });
  test('should not include the indeterminate class when not indeterminate', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {}));
    var expected = _CheckboxModule["default"].indeterminate;
    var actual = subject.prop('className');
    expect(actual).not.toContain(expected);
  });
  test('should add the indeterminate class when given the indeterminate prop', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {
      indeterminate: true
    }));
    var expected = _CheckboxModule["default"].indeterminate;
    var actual = subject.prop('className');
    expect(actual).toContain(expected);
  });
  test('should prioritize indeterminate over selected', function () {
    var subject = (0, _enzyme.shallow)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Checkbox.CheckboxBase, {
      indeterminate: true,
      selected: true,
      indeterminateIcon: "Ind",
      children: "Sel"
    }));
    var expected = 'Ind';
    var actual = subject.find('.icon').prop('children');
    expect(actual).toBe(expected);
  });
});