"use strict";

var _enzyme = require("enzyme");

var _ilib = _interopRequireDefault(require("ilib"));

var _TimePicker = _interopRequireWildcard(require("../TimePicker"));

var _TimePickerModule = _interopRequireDefault(require("../TimePicker.module.css"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Note: Tests pass 'locale' because there's no I18nDecorator to provide a value via context and
// otherwise, nothing renders in the label.
describe('TimePicker', function () {
  // Suite-wide setup
  test('should emit an onChange event when changing a component picker', function () {
    var handleChange = jest.fn();
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      onChange: handleChange,
      value: new Date(2000, 6, 15, 3, 30),
      locale: "en-US"
    }));
    var base = subject.find('DateComponentRangePicker').first();
    base.prop('onChange')({
      value: 0
    });
    var expected = 1;
    var actual = handleChange.mock.calls.length;
    expect(actual).toBe(expected);
  });
  test('should accept a JavaScript Date for its value prop', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      locale: "en-US"
    }));
    var minutePicker = subject.find(".".concat(_TimePickerModule["default"].minutePicker)).at(0);
    var expected = 30;
    var actual = minutePicker.prop('value');
    expect(actual).toBe(expected);
  });
  test('should set "hourAriaLabel" to hour picker', function () {
    var label = 'custom hour aria-label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      hourAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var hourPicker = subject.find(".".concat(_TimePickerModule["default"].hourPicker)).at(0);
    var expected = label;
    var actual = hourPicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "meridiemAriaLabel" to meridiem picker', function () {
    var label = 'custom meridiem aria-label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      meridiemAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var meridiemPicker = subject.find(".".concat(_TimePickerModule["default"].meridiemPicker)).at(0);
    var expected = label;
    var actual = meridiemPicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "minuteAriaLabel" to minute picker', function () {
    var label = 'custom minute aria-label';
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      minuteAriaLabel: label,
      value: new Date(2000, 0, 1, 12, 30)
    }));
    var minutePicker = subject.find(".".concat(_TimePickerModule["default"].minutePicker)).at(0);
    var expected = label;
    var actual = minutePicker.prop('aria-label');
    expect(actual).toBe(expected);
  });
  test('should set "data-webos-voice-disabled" to hour picker when voice control is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));
    var hourPicker = subject.find(".".concat(_TimePickerModule["default"].hourPicker)).at(0);
    var expected = true;
    var actual = hourPicker.prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should set "data-webos-voice-disabled" to merdiem picker when voice control is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));
    var meridiemPicker = subject.find(".".concat(_TimePickerModule["default"].meridiemPicker)).at(0);
    var expected = true;
    var actual = meridiemPicker.prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should set "data-webos-voice-disabled" to minute picker when voice control is disabled', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: new Date(2000, 0, 1, 12, 30),
      "data-webos-voice-disabled": true
    }));
    var minutePicker = subject.find(".".concat(_TimePickerModule["default"].minutePicker)).at(0);
    var expected = true;
    var actual = minutePicker.prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should format a date the same as the label', function () {
    var time = new Date(2000, 0, 1, 12, 30);
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "en-US"
    }));
    var expected = subject.find('Heading').text();
    var actual = (0, _TimePicker.timeToLocaleString)(time);
    expect(actual).toBe(expected);
  });
  test('should format a date the same as the label in another locale', function () {
    _ilib["default"].setLocale('ar-SA');

    var time = new Date(2000, 0, 1, 12, 30);
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "ar-SA"
    }));
    var expected = subject.find('Heading').text();
    var actual = (0, _TimePicker.timeToLocaleString)(time);
    expect(actual).toBe(expected);
  });
  test('should not display Heading', function () {
    var time = new Date(2000, 0, 1, 12, 30);
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_TimePicker["default"], {
      value: time,
      locale: "en-US",
      noLabel: true
    }));
    var expected = false;
    var actual = subject.find('Heading').exists();
    expect(actual).toBe(expected);
  });
});