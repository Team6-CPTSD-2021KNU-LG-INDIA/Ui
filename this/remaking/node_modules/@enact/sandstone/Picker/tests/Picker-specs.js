"use strict";

var _enzyme = require("enzyme");

var _Picker = require("../Picker");

var _jsxRuntime = require("react/jsx-runtime");

describe('Picker Specs', function () {
  test('should render selected child wrapped with <PickerItem/>', function () {
    var picker = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Picker.Picker, {
      value: 1,
      children: [1, 2, 3, 4]
    }));
    var expected = '2';
    var actual = picker.find('PickerItem').text();
    expect(actual).toBe(expected);
  });
  test('should set the max of <Picker> to be one less than the number of children', function () {
    var picker = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Picker.Picker, {
      value: 1,
      children: [1, 2, 3, 4]
    }));
    var expected = 3;
    var actual = picker.find('Picker').last().prop('max');
    expect(actual).toBe(expected);
  });
  test('should be disabled when empty', function () {
    var picker = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Picker.PickerBase, {
      children: []
    }));
    var actual = picker.find('Picker').last().prop('disabled');
    expect(actual).toBe(true);
  });
  test('should set "data-webos-voice-disabled" to decrement button when voice control is disabled', function () {
    var picker = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Picker.PickerBase, {
      "data-webos-voice-disabled": true,
      children: [1, 2, 3, 4]
    }));
    var expected = true;
    var actual = picker.find('PickerButton').at(0).prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should set "data-webos-voice-disabled" to increment button when voice control is disabled', function () {
    var picker = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Picker.PickerBase, {
      "data-webos-voice-disabled": true,
      children: [1, 2, 3, 4]
    }));
    var expected = true;
    var actual = picker.find('PickerButton').at(1).prop('data-webos-voice-disabled');
    expect(actual).toBe(expected);
  });
  test('should have an heading element when \'title\'', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Picker.PickerBase, {
      title: "title text",
      children: [1, 2, 3, 4]
    }));
    expect(subject.find('Heading')).toHaveLength(1);
    var expected = 'title';
    var actual = subject.find('Heading').prop('className');
    expect(actual).toContain(expected);
  });
  test('should have an heading element with inline class when \'title\' and \'inlineTitle\'', function () {
    var subject = (0, _enzyme.mount)( /*#__PURE__*/(0, _jsxRuntime.jsx)(_Picker.PickerBase, {
      title: "title text",
      inlineTitle: true,
      children: [1, 2, 3, 4]
    }));
    expect(subject.find('Heading')).toHaveLength(1);
    var expected = 'inline';
    var actual = subject.find('Heading').prop('className');
    expect(actual).toContain(expected);
  });
});