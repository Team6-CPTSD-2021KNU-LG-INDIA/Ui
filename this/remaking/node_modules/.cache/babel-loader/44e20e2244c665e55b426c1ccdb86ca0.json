{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSkins = useSkins;\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nvar _util = require(\"./util\");\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n/**\n * Allows a component to respond to skin changes via the Context API\n *\n * Example:\n * ```\n * <App skin=\"dark\">\n * \t<Section>\n * \t\t<Button>Gray Button</Button>\n * \t<Section>\n * \t<Popup skin=\"light\">\n * \t\t<Button>White Button</Button>\n * \t</Popup>\n * </App>\n * ```\n *\n * @class SkinContext\n * @memberof ui/Skinnable\n * @private\n */\n\n\nvar SkinContext = /*#__PURE__*/(0, _react.createContext)(null);\n/**\n * Configuration for `useSkins`\n *\n * @typedef {Object} useSkinsConfig\n * @memberof ui/Skinnable\n * @property {String}   defaultSkin       Default skin name when none has been specified or inherited.\n * @property {String[]} [defaultVariants] Default variants when none have been specified or inherited.\n * @property {String}   [skin]            Specific skin to apply to this instance which will take precedence over the default or the inherited value.\n * @property {String[]} skins             List of allowed skins\n * @property {String[]} [skinVariants]    Specific variants to apply to this instance which will take precedence over the default or the inherited value.\n * @property {String[]} [variants]        List of allowed variants\n * @private\n */\n\n/**\n * Object returned by `useSkins`\n *\n * @typedef {Object} useSkinsInterface\n * @memberof ui/Skinnable\n * @property {String}   className    CSS classes for the effective skin and variants.\n * @property {String}   skin         Effective skin based on the allowed skins, the configured.\n *                                   `skin`, the default skin, and the inherited `skin` from up the\n *                                   component tree.\n * @property {String[]} variants     Effective skins variant based on the allowed variants, the\n *                                   configured variants, the default variants, and the inherited\n *                                   variants from up the component tree.\n * @property {Function} provideSkins Wraps a component tree with a skin provider to allow that tree\n *                                   to inherit the effective skin configured at this level.\n * @private\n */\n\n/**\n * Determines the effective skin and skin variants for a component and provides a method to provide\n * those values to other contained components in this subtree.\n *\n * ```\n * function ComponentDecorator (props) {\n *   const skins = useSkins({\n *     defaultSkin: 'neutral',\n *     defaultVariants: [],\n *     skins: ['neutral', 'bold'],\n *     variants: ['highContrast'],\n *     skin: props.skin,\n *     skinVariants: props.skinVariants\n *   });\n *\n *   return skins.provideSkins(\n *     <Component className={classnames(props.className, skins.className)} />\n *   );\n * }\n * ```\n *\n * @param {useSkinsConfig} config Configuration options\n * @returns {useSkinsInterface}\n * @private\n */\n\nfunction useSkins(config) {\n  var defaultSkin = config.defaultSkin,\n      defaultVariants = config.defaultVariants,\n      skin = config.skin,\n      skins = config.skins,\n      skinVariants = config.skinVariants,\n      variants = config.variants;\n\n  var _ref = (0, _react.useContext)(SkinContext) || {},\n      parentSkin = _ref.parentSkin,\n      parentVariants = _ref.parentVariants;\n\n  var effectiveSkin = (0, _util.determineSkin)(defaultSkin, skin, parentSkin);\n  var effectiveVariants = (0, _react.useMemo)(function () {\n    return (0, _util.determineVariants)(defaultVariants, variants, skinVariants, parentVariants);\n  }, [defaultVariants, variants, skinVariants, parentVariants]);\n  var className = (0, _util.getClassName)(skins, effectiveSkin, effectiveVariants);\n  var value = (0, _react.useMemo)(function () {\n    return {\n      parentSkin: effectiveSkin,\n      parentVariants: effectiveVariants\n    };\n  }, [effectiveSkin, effectiveVariants]);\n  var provideSkins = (0, _react.useCallback)(function (children) {\n    return /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinContext.Provider, {\n      value: value,\n      children: children\n    });\n  }, [value]);\n  return {\n    className: className,\n    skin: effectiveSkin,\n    variants: effectiveVariants,\n    provideSkins: provideSkins\n  };\n}\n\nvar _default = useSkins;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/tak43/remaking/node_modules/@enact/ui/Skinnable/useSkins.js"],"names":["Object","defineProperty","exports","value","useSkins","_react","require","_util","_jsxRuntime","SkinContext","createContext","config","defaultSkin","defaultVariants","skin","skins","skinVariants","variants","_ref","useContext","parentSkin","parentVariants","effectiveSkin","determineSkin","effectiveVariants","useMemo","determineVariants","className","getClassName","provideSkins","useCallback","children","jsx","Provider","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSkins = useSkins;\nexports[\"default\"] = void 0;\n\nvar _react = require(\"react\");\n\nvar _util = require(\"./util\");\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\n/**\n * Allows a component to respond to skin changes via the Context API\n *\n * Example:\n * ```\n * <App skin=\"dark\">\n * \t<Section>\n * \t\t<Button>Gray Button</Button>\n * \t<Section>\n * \t<Popup skin=\"light\">\n * \t\t<Button>White Button</Button>\n * \t</Popup>\n * </App>\n * ```\n *\n * @class SkinContext\n * @memberof ui/Skinnable\n * @private\n */\nvar SkinContext = /*#__PURE__*/(0, _react.createContext)(null);\n/**\n * Configuration for `useSkins`\n *\n * @typedef {Object} useSkinsConfig\n * @memberof ui/Skinnable\n * @property {String}   defaultSkin       Default skin name when none has been specified or inherited.\n * @property {String[]} [defaultVariants] Default variants when none have been specified or inherited.\n * @property {String}   [skin]            Specific skin to apply to this instance which will take precedence over the default or the inherited value.\n * @property {String[]} skins             List of allowed skins\n * @property {String[]} [skinVariants]    Specific variants to apply to this instance which will take precedence over the default or the inherited value.\n * @property {String[]} [variants]        List of allowed variants\n * @private\n */\n\n/**\n * Object returned by `useSkins`\n *\n * @typedef {Object} useSkinsInterface\n * @memberof ui/Skinnable\n * @property {String}   className    CSS classes for the effective skin and variants.\n * @property {String}   skin         Effective skin based on the allowed skins, the configured.\n *                                   `skin`, the default skin, and the inherited `skin` from up the\n *                                   component tree.\n * @property {String[]} variants     Effective skins variant based on the allowed variants, the\n *                                   configured variants, the default variants, and the inherited\n *                                   variants from up the component tree.\n * @property {Function} provideSkins Wraps a component tree with a skin provider to allow that tree\n *                                   to inherit the effective skin configured at this level.\n * @private\n */\n\n/**\n * Determines the effective skin and skin variants for a component and provides a method to provide\n * those values to other contained components in this subtree.\n *\n * ```\n * function ComponentDecorator (props) {\n *   const skins = useSkins({\n *     defaultSkin: 'neutral',\n *     defaultVariants: [],\n *     skins: ['neutral', 'bold'],\n *     variants: ['highContrast'],\n *     skin: props.skin,\n *     skinVariants: props.skinVariants\n *   });\n *\n *   return skins.provideSkins(\n *     <Component className={classnames(props.className, skins.className)} />\n *   );\n * }\n * ```\n *\n * @param {useSkinsConfig} config Configuration options\n * @returns {useSkinsInterface}\n * @private\n */\n\nfunction useSkins(config) {\n  var defaultSkin = config.defaultSkin,\n      defaultVariants = config.defaultVariants,\n      skin = config.skin,\n      skins = config.skins,\n      skinVariants = config.skinVariants,\n      variants = config.variants;\n\n  var _ref = (0, _react.useContext)(SkinContext) || {},\n      parentSkin = _ref.parentSkin,\n      parentVariants = _ref.parentVariants;\n\n  var effectiveSkin = (0, _util.determineSkin)(defaultSkin, skin, parentSkin);\n  var effectiveVariants = (0, _react.useMemo)(function () {\n    return (0, _util.determineVariants)(defaultVariants, variants, skinVariants, parentVariants);\n  }, [defaultVariants, variants, skinVariants, parentVariants]);\n  var className = (0, _util.getClassName)(skins, effectiveSkin, effectiveVariants);\n  var value = (0, _react.useMemo)(function () {\n    return {\n      parentSkin: effectiveSkin,\n      parentVariants: effectiveVariants\n    };\n  }, [effectiveSkin, effectiveVariants]);\n  var provideSkins = (0, _react.useCallback)(function (children) {\n    return /*#__PURE__*/(0, _jsxRuntime.jsx)(SkinContext.Provider, {\n      value: value,\n      children: children\n    });\n  }, [value]);\n  return {\n    className: className,\n    skin: effectiveSkin,\n    variants: effectiveVariants,\n    provideSkins: provideSkins\n  };\n}\n\nvar _default = useSkins;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"module"}