{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setDefaultTargetById = exports.once = exports.on = exports.off = void 0;\n\nvar _curry = _interopRequireDefault(require(\"ramda/src/curry\"));\n\nvar _listeners = require(\"./listeners\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Provides methods to add and remove global event listeners.\n *\n * @module core/dispatcher\n * @exports off\n * @exports on\n * @exports once\n */\n\n\nvar defaultTarget = typeof document === 'object' && document;\n/*\n * Sets a selector for the default target. If no selector is set, `document` is the default target.\n *\n * @function\n * @param\t{String}\tid\tNode id of the default target\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @private\n */\n\nvar setDefaultTargetById = function setDefaultTargetById(id) {\n  defaultTarget = typeof document === 'object' && document.querySelector('#' + id) || defaultTarget;\n};\n/*\n * Checks if the default target of `document` exists before returning it, otherwise returns `false`.\n *\n * @function\n *\n * @returns {Node|Boolean}\n * @memberof core/dispatcher\n * @private\n */\n\n\nexports.setDefaultTargetById = setDefaultTargetById;\n\nvar getDefaultTarget = function getDefaultTarget() {\n  return defaultTarget;\n};\n/*\n * Wraps event callbacks with a try-catch block to prevent unrelated code from blocking.\n *\n * @function\n * @param\t{Event}\t\tev\tEvent payload\n * @param\t{Function}\tfn\tEvent callback\n *\n * @returns\t{undefined}\n * @memberof core/dispatcher\n * @private\n */\n\n\nvar invoker = (0, _curry[\"default\"])(function (ev, fn) {\n  try {\n    fn(ev);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\"A \".concat(e.name, \" occurred during event handling with the message '\").concat(e.message, \"'\"));\n  }\n});\n/*\n * Dispatches an event to the registered handlers.\n *\n * @function\n * @param\t{Event}\t\tev\tEvent payload\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @private\n */\n\nvar dispatcher = function dispatcher(ev) {\n  var name = ev.type;\n  var listeners = (0, _listeners.getListeners)(ev.currentTarget, name);\n\n  if (listeners) {\n    var inv = invoker(ev);\n    listeners.forEach(inv);\n  }\n};\n/**\n * Adds a new global event listener. Duplicate event handlers will be discarded.\n *\n * @function\n * @param\t{String}\tname\t\t\t\tEvent name\n * @param\t{Function}\tfn\t\t\t\t\tEvent handler\n * @param\t{Node}\t\t[target='document']\tEvent listener target\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @public\n */\n\n\nvar on = function on(name, fn) {\n  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();\n\n  if (target) {\n    var added = (0, _listeners.addListener)(target, name, fn);\n\n    if (added && (0, _listeners.getListeners)(target, name).length === 1) {\n      target.addEventListener(name, dispatcher);\n    }\n  }\n};\n/**\n * Removes a global event listener.\n *\n * @function\n * @param\t{String}\tname\t\t\t\tEvent name\n * @param\t{Function}\tfn\t\t\t\t\tEvent handler\n * @param\t{Node}\t\t[target=`document`]\tEvent listener target\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @public\n */\n\n\nexports.on = on;\n\nvar off = function off(name, fn) {\n  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();\n\n  if (target) {\n    var listeners = (0, _listeners.getListeners)(target, name);\n    var index = listeners.indexOf(fn);\n\n    if (index >= 0) {\n      listeners.splice(index, 1);\n\n      if (listeners.length === 0) {\n        target.removeEventListener(name, dispatcher);\n      }\n    }\n  }\n};\n/**\n * Adds a new global event listener that removes itself after handling one event.\n *\n * @function\n * @param\t{String}\tname\t\tEvent name\n * @param\t{Function}\tfn\t\t\tEvent handler\n * @param\t{Node}\t\t[target]\tEvent listener target\n *\n * @returns {Function}\t\t\t\tThe single-use handler. To remove the handler manually, call\n *\t\t\t\t\t\t\t\t\tthe `off()` function with this as the 2nd parameter.\n * @memberof core/dispatcher\n * @public\n */\n\n\nexports.off = off;\n\nvar once = function once(name, fn, target) {\n  var onceFn = function onceFn(ev) {\n    fn(ev);\n    off(name, onceFn, target);\n  };\n\n  on(name, onceFn, target);\n  return onceFn;\n};\n\nexports.once = once;","map":{"version":3,"sources":["C:/Users/tak43/remaking/node_modules/@enact/core/dispatcher/dispatcher.js"],"names":["Object","defineProperty","exports","value","setDefaultTargetById","once","on","off","_curry","_interopRequireDefault","require","_listeners","obj","__esModule","defaultTarget","document","id","querySelector","getDefaultTarget","invoker","ev","fn","e","console","error","concat","name","message","dispatcher","type","listeners","getListeners","currentTarget","inv","forEach","target","arguments","length","undefined","added","addListener","addEventListener","index","indexOf","splice","removeEventListener","onceFn"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setDefaultTargetById = exports.once = exports.on = exports.off = void 0;\n\nvar _curry = _interopRequireDefault(require(\"ramda/src/curry\"));\n\nvar _listeners = require(\"./listeners\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Provides methods to add and remove global event listeners.\n *\n * @module core/dispatcher\n * @exports off\n * @exports on\n * @exports once\n */\nvar defaultTarget = typeof document === 'object' && document;\n/*\n * Sets a selector for the default target. If no selector is set, `document` is the default target.\n *\n * @function\n * @param\t{String}\tid\tNode id of the default target\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @private\n */\n\nvar setDefaultTargetById = function setDefaultTargetById(id) {\n  defaultTarget = typeof document === 'object' && document.querySelector('#' + id) || defaultTarget;\n};\n/*\n * Checks if the default target of `document` exists before returning it, otherwise returns `false`.\n *\n * @function\n *\n * @returns {Node|Boolean}\n * @memberof core/dispatcher\n * @private\n */\n\n\nexports.setDefaultTargetById = setDefaultTargetById;\n\nvar getDefaultTarget = function getDefaultTarget() {\n  return defaultTarget;\n};\n/*\n * Wraps event callbacks with a try-catch block to prevent unrelated code from blocking.\n *\n * @function\n * @param\t{Event}\t\tev\tEvent payload\n * @param\t{Function}\tfn\tEvent callback\n *\n * @returns\t{undefined}\n * @memberof core/dispatcher\n * @private\n */\n\n\nvar invoker = (0, _curry[\"default\"])(function (ev, fn) {\n  try {\n    fn(ev);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(\"A \".concat(e.name, \" occurred during event handling with the message '\").concat(e.message, \"'\"));\n  }\n});\n/*\n * Dispatches an event to the registered handlers.\n *\n * @function\n * @param\t{Event}\t\tev\tEvent payload\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @private\n */\n\nvar dispatcher = function dispatcher(ev) {\n  var name = ev.type;\n  var listeners = (0, _listeners.getListeners)(ev.currentTarget, name);\n\n  if (listeners) {\n    var inv = invoker(ev);\n    listeners.forEach(inv);\n  }\n};\n/**\n * Adds a new global event listener. Duplicate event handlers will be discarded.\n *\n * @function\n * @param\t{String}\tname\t\t\t\tEvent name\n * @param\t{Function}\tfn\t\t\t\t\tEvent handler\n * @param\t{Node}\t\t[target='document']\tEvent listener target\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @public\n */\n\n\nvar on = function on(name, fn) {\n  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();\n\n  if (target) {\n    var added = (0, _listeners.addListener)(target, name, fn);\n\n    if (added && (0, _listeners.getListeners)(target, name).length === 1) {\n      target.addEventListener(name, dispatcher);\n    }\n  }\n};\n/**\n * Removes a global event listener.\n *\n * @function\n * @param\t{String}\tname\t\t\t\tEvent name\n * @param\t{Function}\tfn\t\t\t\t\tEvent handler\n * @param\t{Node}\t\t[target=`document`]\tEvent listener target\n *\n * @returns {undefined}\n * @memberof core/dispatcher\n * @public\n */\n\n\nexports.on = on;\n\nvar off = function off(name, fn) {\n  var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getDefaultTarget();\n\n  if (target) {\n    var listeners = (0, _listeners.getListeners)(target, name);\n    var index = listeners.indexOf(fn);\n\n    if (index >= 0) {\n      listeners.splice(index, 1);\n\n      if (listeners.length === 0) {\n        target.removeEventListener(name, dispatcher);\n      }\n    }\n  }\n};\n/**\n * Adds a new global event listener that removes itself after handling one event.\n *\n * @function\n * @param\t{String}\tname\t\tEvent name\n * @param\t{Function}\tfn\t\t\tEvent handler\n * @param\t{Node}\t\t[target]\tEvent listener target\n *\n * @returns {Function}\t\t\t\tThe single-use handler. To remove the handler manually, call\n *\t\t\t\t\t\t\t\t\tthe `off()` function with this as the 2nd parameter.\n * @memberof core/dispatcher\n * @public\n */\n\n\nexports.off = off;\n\nvar once = function once(name, fn, target) {\n  var onceFn = function onceFn(ev) {\n    fn(ev);\n    off(name, onceFn, target);\n  };\n\n  on(name, onceFn, target);\n  return onceFn;\n};\n\nexports.once = once;"]},"metadata":{},"sourceType":"module"}